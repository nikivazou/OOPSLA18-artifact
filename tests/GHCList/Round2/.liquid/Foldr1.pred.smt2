(set-option :auto-config false)
(set-option :model true)
(set-option :model.partial false)

(define-sort Str () Int)
(declare-fun strLen (Str) Int)
(declare-fun subString (Str Int Int) Str)
(declare-fun concatString (Str Str) Str)
(define-sort Elt () Int)
(define-sort Set () (Array Elt Bool))
(define-fun smt_set_emp () Set ((as const Set) false))
(define-fun smt_set_mem ((x Elt) (s Set)) Bool (select s x))
(define-fun smt_set_add ((s Set) (x Elt)) Set (store s x true))
(define-fun smt_set_cup ((s1 Set) (s2 Set)) Set ((_ map or) s1 s2))
(define-fun smt_set_cap ((s1 Set) (s2 Set)) Set ((_ map and) s1 s2))
(define-fun smt_set_com ((s Set)) Set ((_ map not) s))
(define-fun smt_set_dif ((s1 Set) (s2 Set)) Set (smt_set_cap s1 (smt_set_com s2)))
(define-fun smt_set_sub ((s1 Set) (s2 Set)) Bool (= smt_set_emp (smt_set_dif s1 s2)))
(define-sort Map () (Array Elt Elt))
(define-fun smt_map_sel ((m Map) (k Elt)) Elt (select m k))
(define-fun smt_map_sto ((m Map) (k Elt) (v Elt)) Map (store m k v))
(define-fun bool_to_int ((b Bool)) Int (ite b 1 0))
(define-fun Z3_OP_MUL ((x Int) (y Int)) Int (* x y))
(define-fun Z3_OP_DIV ((x Int) (y Int)) Int (div x y))
(declare-fun lq_karg$36$lq_tmp$36$x$35$$35$107$35$$35$k_$35$$35$109 () Int)
(declare-fun runFun () Int)
(declare-fun lq_karg$36$VV$35$$35$108$35$$35$k_$35$$35$109 () Int)
(declare-fun cast_as_int () Int)
(declare-fun lq_karg$36$VV$35$$35$104$35$$35$k_$35$$35$105 () Int)
(declare-fun lq_tmp$36$x$35$$35$311 () Int)
(declare-fun addrLen () Int)
(declare-fun papp5 () Int)
(declare-fun VV$35$$35$F$35$$35$1 () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792811782$35$$35$d4Jg () Int)
(declare-fun GHC.Types.LT () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792811780$35$$35$d4Je () Int)
(declare-fun lit$36$foldr1 () Str)
(declare-fun papp3 () Int)
(declare-fun Round2.Foldr1.$36$trModule () Int)
(declare-fun GHC.Types.$58$ () Int)
(declare-fun lq_tmp$36$x$35$$35$277 () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792811773$35$$35$d4J7$35$$35$k_$35$$35$166 () Str)
(declare-fun papp4 () Int)
(declare-fun GHC.Types.Module () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792811772$35$$35$d4J6$35$$35$k_$35$$35$166 () Int)
(declare-fun lq_karg$36$ds_d4IT$35$$35$k_$35$$35$115 () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792811777$35$$35$d4Jb () Int)
(declare-fun lq_karg$36$VV$35$$35$111$35$$35$k_$35$$35$105 () Int)
(declare-fun autolen () Int)
(declare-fun VV$35$$35$F$35$$35$6 () Int)
(declare-fun head () Int)
(declare-fun lq_tmp$36$db$35$$35$1 () Int)
(declare-fun lq_karg$36$xs$35$$35$$34$$47$Users$47$niki$47$tmp$47$OOPLSA18$45$artifact$47$tests$47$GHCList$47$Round2$47$Foldr1.hs$34$$32$$40$line$32$7$44$$32$column$32$58$41$ () Int)
(declare-fun papp2 () Int)
(declare-fun lq_karg$36$VV$35$$35$111$35$$35$k_$35$$35$112 () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792811778$35$$35$d4Jc () Int)
(declare-fun VV$35$$35$464 () Int)
(declare-fun lit$36$main () Str)
(declare-fun fromJust () Int)
(declare-fun VV$35$$35$F$35$$35$8 () Int)
(declare-fun papp7 () Int)
(declare-fun VV$35$$35$F$35$$35$11 () Str)
(declare-fun lq_anf$36$$35$$35$7205759403792811772$35$$35$d4J6 () Int)
(declare-fun VV$35$$35$F$35$$35$7 () Int)
(declare-fun lq_tmp$36$x$35$$35$107 () Int)
(declare-fun GHC.Types.$91$$93$ () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792811773$35$$35$d4J7 () Str)
(declare-fun lq_karg$36$ds_d4IT$35$$35$k_$35$$35$166 () Int)
(declare-fun fldList () Int)
(declare-fun VV$35$$35$F$35$$35$2 () Int)
(declare-fun lq_tmp$36$x$35$$35$102 () Int)
(declare-fun lq_karg$36$VV$35$$35$114$35$$35$k_$35$$35$115 () Int)
(declare-fun lq_tmp$36$x$35$$35$164 () Int)
(declare-fun GHC.Types.GT () Int)
(declare-fun VV$35$$35$352 () Int)
(declare-fun lq_tmp$36$x$35$$35$312 () Int)
(declare-fun x$35$$35$a4Ic () Int)
(declare-fun len () Int)
(declare-fun papp6 () Int)
(declare-fun VV$35$$35$F$35$$35$9 () Int)
(declare-fun VV$35$$35$F$35$$35$10 () Int)
(declare-fun VV$35$$35$447 () Int)
(declare-fun VV$35$$35$468 () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792811776$35$$35$d4Ja () Int)
(declare-fun isJust () Int)
(declare-fun lq_karg$36$VV$35$$35$323$35$$35$k_$35$$35$324 () Int)
(declare-fun VV$35$$35$F$35$$35$4 () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792811781$35$$35$d4Jf () Str)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792811774$35$$35$d4J8$35$$35$k_$35$$35$166 () Str)
(declare-fun VV$35$$35$410 () Int)
(declare-fun GHC.Types.TrNameS () Int)
(declare-fun ds_d4IT () Int)
(declare-fun VV$35$$35$F$35$$35$3 () Int)
(declare-fun papp1 () Int)
(declare-fun x () Str)
(declare-fun lq_anf$36$$35$$35$7205759403792811779$35$$35$d4Jd () Str)
(declare-fun tail () Int)
(declare-fun VV$35$$35$F$35$$35$5 () Int)
(declare-fun lq_tmp$36$db$35$$35$2 () Int)
(declare-fun GHC.Types.EQ () Int)
(declare-fun lq_rnm$36$fldList$35$$35$58 () Int)
(declare-fun lq_tmp$36$x$35$$35$119 () Int)
(declare-fun lq_karg$36$VV$35$$35$165$35$$35$k_$35$$35$166 () Int)
(declare-fun ds_d4J3 () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792811774$35$$35$d4J8 () Str)
(declare-fun lq_tmp$36$x$35$$35$314 () Int)
(declare-fun snd () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792811775$35$$35$d4J9 () Int)
(declare-fun fst () Int)
(declare-fun lit$36$Round2.Foldr1 () Str)
(declare-fun apply$35$$35$13 (Int (_ BitVec 32)) Bool)
(declare-fun apply$35$$35$9 (Int Str) Bool)
(declare-fun apply$35$$35$6 (Int Bool) Str)
(declare-fun apply$35$$35$11 (Int Str) (_ BitVec 32))
(declare-fun apply$35$$35$15 (Int (_ BitVec 32)) (_ BitVec 32))
(declare-fun apply$35$$35$0 (Int Int) Int)
(declare-fun apply$35$$35$8 (Int Str) Int)
(declare-fun apply$35$$35$1 (Int Int) Bool)
(declare-fun apply$35$$35$7 (Int Bool) (_ BitVec 32))
(declare-fun apply$35$$35$14 (Int (_ BitVec 32)) Str)
(declare-fun apply$35$$35$10 (Int Str) Str)
(declare-fun apply$35$$35$5 (Int Bool) Bool)
(declare-fun apply$35$$35$2 (Int Int) Str)
(declare-fun apply$35$$35$12 (Int (_ BitVec 32)) Int)
(declare-fun apply$35$$35$3 (Int Int) (_ BitVec 32))
(declare-fun apply$35$$35$4 (Int Bool) Int)
(declare-fun smt_lambda$35$$35$13 ((_ BitVec 32) Bool) Int)
(declare-fun smt_lambda$35$$35$9 (Str Bool) Int)
(declare-fun smt_lambda$35$$35$6 (Bool Str) Int)
(declare-fun smt_lambda$35$$35$11 (Str (_ BitVec 32)) Int)
(declare-fun smt_lambda$35$$35$15 ((_ BitVec 32) (_ BitVec 32)) Int)
(declare-fun smt_lambda$35$$35$0 (Int Int) Int)
(declare-fun smt_lambda$35$$35$8 (Str Int) Int)
(declare-fun smt_lambda$35$$35$1 (Int Bool) Int)
(declare-fun smt_lambda$35$$35$7 (Bool (_ BitVec 32)) Int)
(declare-fun smt_lambda$35$$35$14 ((_ BitVec 32) Str) Int)
(declare-fun smt_lambda$35$$35$10 (Str Str) Int)
(declare-fun smt_lambda$35$$35$5 (Bool Bool) Int)
(declare-fun smt_lambda$35$$35$2 (Int Str) Int)
(declare-fun smt_lambda$35$$35$12 ((_ BitVec 32) Int) Int)
(declare-fun smt_lambda$35$$35$3 (Int (_ BitVec 32)) Int)
(declare-fun smt_lambda$35$$35$4 (Bool Int) Int)
(declare-fun lam_arg$35$$35$1$35$$35$0 () Int)
(declare-fun lam_arg$35$$35$2$35$$35$0 () Int)
(declare-fun lam_arg$35$$35$3$35$$35$0 () Int)
(declare-fun lam_arg$35$$35$4$35$$35$0 () Int)
(declare-fun lam_arg$35$$35$5$35$$35$0 () Int)
(declare-fun lam_arg$35$$35$6$35$$35$0 () Int)
(declare-fun lam_arg$35$$35$7$35$$35$0 () Int)
(declare-fun lam_arg$35$$35$1$35$$35$8 () Str)
(declare-fun lam_arg$35$$35$2$35$$35$8 () Str)
(declare-fun lam_arg$35$$35$3$35$$35$8 () Str)
(declare-fun lam_arg$35$$35$4$35$$35$8 () Str)
(declare-fun lam_arg$35$$35$5$35$$35$8 () Str)
(declare-fun lam_arg$35$$35$6$35$$35$8 () Str)
(declare-fun lam_arg$35$$35$7$35$$35$8 () Str)
(declare-fun lam_arg$35$$35$1$35$$35$12 () (_ BitVec 32))
(declare-fun lam_arg$35$$35$2$35$$35$12 () (_ BitVec 32))
(declare-fun lam_arg$35$$35$3$35$$35$12 () (_ BitVec 32))
(declare-fun lam_arg$35$$35$4$35$$35$12 () (_ BitVec 32))
(declare-fun lam_arg$35$$35$5$35$$35$12 () (_ BitVec 32))
(declare-fun lam_arg$35$$35$6$35$$35$12 () (_ BitVec 32))
(declare-fun lam_arg$35$$35$7$35$$35$12 () (_ BitVec 32))
(declare-fun lam_arg$35$$35$1$35$$35$4 () Bool)
(declare-fun lam_arg$35$$35$2$35$$35$4 () Bool)
(declare-fun lam_arg$35$$35$3$35$$35$4 () Bool)
(declare-fun lam_arg$35$$35$4$35$$35$4 () Bool)
(declare-fun lam_arg$35$$35$5$35$$35$4 () Bool)
(declare-fun lam_arg$35$$35$6$35$$35$4 () Bool)
(declare-fun lam_arg$35$$35$7$35$$35$4 () Bool)
(assert (distinct lit$36$Round2.Foldr1 lit$36$main lit$36$foldr1))
(assert (distinct GHC.Types.EQ GHC.Types.GT GHC.Types.LT))
(assert (= (strLen lit$36$foldr1) 6))
(assert (= (strLen lit$36$main) 4))
(assert (= (strLen lit$36$Round2.Foldr1) 13))
(push 1)
(assert (not (exists ((lq_karg$36$xs$35$$35$$34$$47$Users$47$niki$47$tmp$47$OOPLSA18$45$artifact$47$tests$47$GHCList$47$Round2$47$Foldr1.hs$34$$32$$40$line$32$7$44$$32$column$32$58$41$ Int) (len$32$xs Int)) (and (= len$32$xs 0)))))
(check-sat)
; SMT Says: Unsat
(pop 1)
(push 1)
(assert (not (exists ((lq_karg$36$xs$35$$35$$34$$47$Users$47$niki$47$tmp$47$OOPLSA18$45$artifact$47$tests$47$GHCList$47$Round2$47$Foldr1.hs$34$$32$$40$line$32$7$44$$32$column$32$58$41$ Int) (len$32$xs Int)) (and (>= len$32$xs 0)))))
(check-sat)
; SMT Says: Unsat
(pop 1)
(push 1)
(assert (not (exists ((lq_karg$36$xs$35$$35$$34$$47$Users$47$niki$47$tmp$47$OOPLSA18$45$artifact$47$tests$47$GHCList$47$Round2$47$Foldr1.hs$34$$32$$40$line$32$7$44$$32$column$32$58$41$ Int) (len$32$xs Int)) (and (> len$32$xs 0)))))
(check-sat)
; SMT Says: Unsat
(pop 1)
(push 1)
(assert (not (forall ((lq_karg$36$xs$35$$35$$34$$47$Users$47$niki$47$tmp$47$OOPLSA18$45$artifact$47$tests$47$GHCList$47$Round2$47$Foldr1.hs$34$$32$$40$line$32$7$44$$32$column$32$58$41$ Int)) (=> true true))))
(check-sat)
; SMT Says: Unsat
(pop 1)
(push 1)
(assert (not (forall ((lq_karg$36$xs$35$$35$$34$$47$Users$47$niki$47$tmp$47$OOPLSA18$45$artifact$47$tests$47$GHCList$47$Round2$47$Foldr1.hs$34$$32$$40$line$32$7$44$$32$column$32$58$41$ Int) (len$32$xs Int)) (=> (and (= len$32$xs 0)) true))))
(check-sat)
; SMT Says: Unsat
(pop 1)
(push 1)
(assert (not (forall ((lq_karg$36$xs$35$$35$$34$$47$Users$47$niki$47$tmp$47$OOPLSA18$45$artifact$47$tests$47$GHCList$47$Round2$47$Foldr1.hs$34$$32$$40$line$32$7$44$$32$column$32$58$41$ Int) (len$32$xs Int)) (=> (and (>= len$32$xs 0)) true))))
(check-sat)
; SMT Says: Unsat
(pop 1)
(push 1)
(assert (not (forall ((lq_karg$36$xs$35$$35$$34$$47$Users$47$niki$47$tmp$47$OOPLSA18$45$artifact$47$tests$47$GHCList$47$Round2$47$Foldr1.hs$34$$32$$40$line$32$7$44$$32$column$32$58$41$ Int) (len$32$xs Int)) (=> (and (> len$32$xs 0)) true))))
(check-sat)
; SMT Says: Unsat
(pop 1)
(exit)
