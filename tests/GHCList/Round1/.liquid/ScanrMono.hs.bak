{-@ LIQUID "--eliminate=none" @-}
{-# LANGUAGE RankNTypes #-}
{-# LANGUAGE ScopedTypeVariables #-}

module Round1.Scanr where

import Prelude hiding (init, last, tail, head, (!!), length, null, filter, concat, foldl, foldl1
	                  , scanl, foldr1, scanl', scanl1, scanr, scanr1, iterate, take, repeat, drop, cycle)

{-@ LIQUID "--no-termination" @-}
{-@ scanr               :: (Int -> Int -> Int) -> Int -> i:[Int] -> {o:[Int] | 0 < len o} @-}
scanr                   :: (Int -> Int -> Int) -> Int -> [Int] -> [Int]
scanr _ q0 []           =  [q0]
scanr f q0 (x:xs)       =  f x q : qs
                           where qs@(q:_) = scanr f q0 xs
