(set-option :auto-config false)
(set-option :model true)
(set-option :model.partial false)

(define-sort Str () Int)
(declare-fun strLen (Str) Int)
(declare-fun subString (Str Int Int) Str)
(declare-fun concatString (Str Str) Str)
(define-sort Elt () Int)
(define-sort Set () (Array Elt Bool))
(define-fun smt_set_emp () Set ((as const Set) false))
(define-fun smt_set_mem ((x Elt) (s Set)) Bool (select s x))
(define-fun smt_set_add ((s Set) (x Elt)) Set (store s x true))
(define-fun smt_set_cup ((s1 Set) (s2 Set)) Set ((_ map or) s1 s2))
(define-fun smt_set_cap ((s1 Set) (s2 Set)) Set ((_ map and) s1 s2))
(define-fun smt_set_com ((s Set)) Set ((_ map not) s))
(define-fun smt_set_dif ((s1 Set) (s2 Set)) Set (smt_set_cap s1 (smt_set_com s2)))
(define-fun smt_set_sub ((s1 Set) (s2 Set)) Bool (= smt_set_emp (smt_set_dif s1 s2)))
(define-sort Map () (Array Elt Elt))
(define-fun smt_map_sel ((m Map) (k Elt)) Elt (select m k))
(define-fun smt_map_sto ((m Map) (k Elt) (v Elt)) Map (store m k v))
(define-fun bool_to_int ((b Bool)) Int (ite b 1 0))
(define-fun Z3_OP_MUL ((x Int) (y Int)) Int (* x y))
(define-fun Z3_OP_DIV ((x Int) (y Int)) Int (div x y))
(declare-fun lq_karg$36$xs$35$$35$aRi$35$$35$k_$35$$35$329 () Int)
(declare-fun runFun () Int)
(declare-fun VV$35$$35$F$35$$35$28 () Str)
(declare-fun VV$35$$35$703 () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792797000$35$$35$dSQ$35$$35$k_$35$$35$393 () Int)
(declare-fun cast_as_int () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792797001$35$$35$dSR$35$$35$k_$35$$35$308 () Int)
(declare-fun lq_karg$36$ds_dSw$35$$35$k_$35$$35$540 () Int)
(declare-fun lq_karg$36$q$35$$35$aRH$35$$35$k_$35$$35$407 () Int)
(declare-fun lq_karg$36$VV$35$$35$276$35$$35$k_$35$$35$277 () Int)
(declare-fun VV$35$$35$F$35$$35$31 () Int)
(declare-fun lq_karg$36$lq_tmp$36$x$35$$35$272$35$$35$k_$35$$35$274 () Int)
(declare-fun lq_karg$36$VV$35$$35$388$35$$35$k_$35$$35$389 () Int)
(declare-fun lq_karg$36$VV$35$$35$328$35$$35$k_$35$$35$312 () Int)
(declare-fun lq_karg$36$ds_dSw$35$$35$k_$35$$35$144 () Int)
(declare-fun lq_tmp$36$x$35$$35$399 () Int)
(declare-fun lq_karg$36$ds_dSL$35$$35$k_$35$$35$389 () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792797000$35$$35$dSQ$35$$35$k_$35$$35$540 () Int)
(declare-fun addrLen () Int)
(declare-fun lq_karg$36$x$35$$35$aRh$35$$35$k_$35$$35$277 () Int)
(declare-fun lq_karg$36$VV$35$$35$418$35$$35$k_$35$$35$419 () Int)
(declare-fun lq_karg$36$VV$35$$35$328$35$$35$k_$35$$35$329 () Int)
(declare-fun lq_karg$36$xs$35$$35$aRi$35$$35$k_$35$$35$312 () Int)
(declare-fun lq_karg$36$ds_dSw$35$$35$k_$35$$35$393 () Int)
(declare-fun papp5 () Int)
(declare-fun lq_karg$36$xs$35$$35$aRi$35$$35$k_$35$$35$536 () Int)
(declare-fun VV$35$$35$F$35$$35$13 () Int)
(declare-fun x_Tuple21 () Int)
(declare-fun VV$35$$35$848 () Int)
(declare-fun x_Tuple65 () Int)
(declare-fun lq_karg$36$xs$35$$35$aRi$35$$35$k_$35$$35$267 () Int)
(declare-fun lq_karg$36$VV$35$$35$328$35$$35$k_$35$$35$322 () Int)
(declare-fun lq_karg$36$xs$35$$35$aRi$35$$35$k_$35$$35$319 () Int)
(declare-fun VV$35$$35$F$35$$35$1 () Int)
(declare-fun x_Tuple55 () Int)
(declare-fun VV$35$$35$F$35$$35$18 () Int)
(declare-fun lit$36$$47$Users$47$niki$47$liquidtypes$47$currentLH$47$liquidhaskell$47$tests$47$gradual$47$pos$47$GHCList$47$Round1$47$ScanrMono.hs$58$15$58$34$45$57$124$qs$64$$40$q$32$$58$$32$_$41$ () Str)
(declare-fun lq_tmp$36$x$35$$35$167 () Int)
(declare-fun lq_karg$36$VV$35$$35$259$35$$35$k_$35$$35$260 () Int)
(declare-fun lq_karg$36$xs$35$$35$aRi$35$$35$k_$35$$35$322 () Int)
(declare-fun VV$35$$35$F$35$$35$23 () Int)
(declare-fun lq_karg$36$x$35$$35$aRh$35$$35$k_$35$$35$540 () Int)
(declare-fun lq_karg$36$x$35$$35$aRh$35$$35$k_$35$$35$393 () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792797000$35$$35$dSQ$35$$35$k_$35$$35$277 () Int)
(declare-fun x_Tuple33 () Int)
(declare-fun lq_karg$36$xs$35$$35$aRi$35$$35$k_$35$$35$407 () Int)
(declare-fun GHC.Types.LT () Int)
(declare-fun lq_karg$36$q0$35$$35$aRe$35$$35$k_$35$$35$148 () Int)
(declare-fun lq_karg$36$ds_dSw$35$$35$k_$35$$35$277 () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792796998$35$$35$dSO$35$$35$k_$35$$35$148 () Int)
(declare-fun x_Tuple77 () Int)
(declare-fun lq_karg$36$ds_dSw$35$$35$k_$35$$35$174 () Int)
(declare-fun lq_karg$36$VV$35$$35$328$35$$35$k_$35$$35$319 () Int)
(declare-fun lq_karg$36$q$35$$35$aRH$35$$35$k_$35$$35$536 () Int)
(declare-fun lq_karg$36$lq_tmp$36$db$35$$35$4$35$$35$$34$$47$Users$47$niki$47$liquidtypes$47$currentLH$47$liquidhaskell$47$tests$47$gradual$47$pos$47$GHCList$47$Round1$47$ScanrMono.hs$34$$32$$40$line$32$11$44$$32$column$32$83$41$ () Int)
(declare-fun lq_karg$36$q0$35$$35$aRe$35$$35$k_$35$$35$270 () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792796998$35$$35$dSO$35$$35$k_$35$$35$270 () Int)
(declare-fun lq_karg$36$ds_dSD$35$$35$k_$35$$35$540 () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792797002$35$$35$dSS$35$$35$k_$35$$35$326 () Str)
(declare-fun lq_karg$36$VV$35$$35$147$35$$35$k_$35$$35$148 () Int)
(declare-fun VV$35$$35$794 () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792797000$35$$35$dSQ$35$$35$k_$35$$35$326 () Int)
(declare-fun lq_karg$36$q0$35$$35$aRe$35$$35$k_$35$$35$426 () Int)
(declare-fun lq_karg$36$q0$35$$35$aRe$35$$35$k_$35$$35$264 () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792796998$35$$35$dSO$35$$35$k_$35$$35$264 () Int)
(declare-fun papp3 () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792796998$35$$35$dSO$35$$35$k_$35$$35$426 () Int)
(declare-fun VV$35$$35$F$35$$35$15 () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792797001$35$$35$dSR () Int)
(declare-fun lq_karg$36$ds_dSw$35$$35$k_$35$$35$403 () Int)
(declare-fun x_Tuple63 () Int)
(declare-fun x_Tuple41 () Int)
(declare-fun q$35$$35$aRH () Int)
(declare-fun lq_karg$36$ds_dSL$35$$35$k_$35$$35$396 () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792797000$35$$35$dSQ$35$$35$k_$35$$35$403 () Int)
(declare-fun lq_karg$36$ds_dSw$35$$35$k_$35$$35$326 () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792797005$35$$35$dSV () Int)
(declare-fun lq_karg$36$x$35$$35$aRh$35$$35$k_$35$$35$316 () Int)
(declare-fun lq_karg$36$VV$35$$35$307$35$$35$k_$35$$35$308 () Int)
(declare-fun lq_karg$36$VV$35$$35$173$35$$35$k_$35$$35$174 () Int)
(declare-fun lq_karg$36$VV$35$$35$263$35$$35$k_$35$$35$264 () Int)
(declare-fun lq_karg$36$VV$35$$35$425$35$$35$k_$35$$35$419 () Int)
(declare-fun VV$35$$35$659 () Int)
(declare-fun VV$35$$35$758 () Int)
(declare-fun lq_tmp$36$x$35$$35$533 () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792796998$35$$35$dSO$35$$35$k_$35$$35$326 () Int)
(declare-fun GHC.Types.$58$ () Int)
(declare-fun lq_karg$36$VV$35$$35$269$35$$35$k_$35$$35$270 () Int)
(declare-fun VV$35$$35$937 () Int)
(declare-fun lq_tmp$36$x$35$$35$569 () Int)
(declare-fun lq_karg$36$x$35$$35$aRh$35$$35$k_$35$$35$308 () Int)
(declare-fun lq_karg$36$q0$35$$35$aRe$35$$35$k_$35$$35$403 () Int)
(declare-fun papp4 () Int)
(declare-fun GHC.Types.Module () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792797000$35$$35$dSQ$35$$35$k_$35$$35$264 () Int)
(declare-fun VV$35$$35$F$35$$35$12 () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792797000$35$$35$dSQ$35$$35$k_$35$$35$426 () Int)
(declare-fun lq_karg$36$q0$35$$35$aRe$35$$35$k_$35$$35$326 () Int)
(declare-fun lq_karg$36$ds_dSw$35$$35$k_$35$$35$264 () Int)
(declare-fun lq_karg$36$ds_dSw$35$$35$k_$35$$35$426 () Int)
(declare-fun x_Tuple64 () Int)
(declare-fun lq_karg$36$ds_dSL$35$$35$k_$35$$35$407 () Int)
(declare-fun lq_karg$36$VV$35$$35$469$35$$35$k_$35$$35$470 () Int)
(declare-fun VV$35$$35$F$35$$35$29 () Int)
(declare-fun lq_karg$36$x$35$$35$aRh$35$$35$k_$35$$35$470 () Int)
(declare-fun VV$35$$35$F$35$$35$30 () Int)
(declare-fun lq_karg$36$ds_dSD$35$$35$k_$35$$35$470 () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792796998$35$$35$dSO$35$$35$k_$35$$35$403 () Int)
(declare-fun VV$35$$35$638 () Int)
(declare-fun lq_karg$36$xs$35$$35$aRi$35$$35$k_$35$$35$274 () Int)
(declare-fun lq_karg$36$q$35$$35$aRH$35$$35$k_$35$$35$389 () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792797001$35$$35$dSR$35$$35$k_$35$$35$403 () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792797006$35$$35$dSW () Str)
(declare-fun VV$35$$35$891 () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792797000$35$$35$dSQ$35$$35$k_$35$$35$270 () Int)
(declare-fun lq_karg$36$ds_dSw$35$$35$k_$35$$35$270 () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792797002$35$$35$dSS () Str)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792797001$35$$35$dSR$35$$35$k_$35$$35$326 () Int)
(declare-fun lq_karg$36$ds_dSw$35$$35$k_$35$$35$148 () Int)
(declare-fun lq_karg$36$xs$35$$35$aRi$35$$35$k_$35$$35$396 () Int)
(declare-fun lq_karg$36$q0$35$$35$aRe$35$$35$k_$35$$35$174 () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792796998$35$$35$dSO$35$$35$k_$35$$35$174 () Int)
(declare-fun lq_karg$36$q0$35$$35$aRe$35$$35$k_$35$$35$277 () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792796998$35$$35$dSO$35$$35$k_$35$$35$277 () Int)
(declare-fun autolen () Int)
(declare-fun lq_tmp$36$x$35$$35$564 () Int)
(declare-fun lq_karg$36$xs$35$$35$aRi$35$$35$k_$35$$35$260 () Int)
(declare-fun lq_tmp$36$x$35$$35$421 () Int)
(declare-fun VV$35$$35$F$35$$35$6 () Int)
(declare-fun lq_karg$36$lq_tmp$36$x$35$$35$176$35$$35$k_$35$$35$174 () Int)
(declare-fun x_Tuple52 () Int)
(declare-fun lq_karg$36$xs$35$$35$aRi$35$$35$k_$35$$35$419 () Int)
(declare-fun head () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792797004$35$$35$dSU () Str)
(declare-fun lq_karg$36$lq_tmp$36$x$35$$35$314$35$$35$k_$35$$35$316 () Int)
(declare-fun lq_tmp$36$db$35$$35$1 () Int)
(declare-fun VV$35$$35$F$35$$35$24 () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792797000$35$$35$dSQ () Int)
(declare-fun VV$35$$35$975 () Int)
(declare-fun lq_karg$36$q$35$$35$aRH$35$$35$k_$35$$35$396 () Int)
(declare-fun x$35$$35$aRh () Int)
(declare-fun lq_karg$36$VV$35$$35$276$35$$35$k_$35$$35$270 () Int)
(declare-fun lq_karg$36$VV$35$$35$539$35$$35$k_$35$$35$540 () Int)
(declare-fun lq_karg$36$q0$35$$35$aRe$35$$35$k_$35$$35$144 () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792796998$35$$35$dSO$35$$35$k_$35$$35$144 () Int)
(declare-fun lq_karg$36$q0$35$$35$aRe$35$$35$k_$35$$35$393 () Int)
(declare-fun lq_karg$36$q0$35$$35$aRe$35$$35$k_$35$$35$540 () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792796998$35$$35$dSO$35$$35$k_$35$$35$540 () Int)
(declare-fun ds_dSD () Int)
(declare-fun lq_karg$36$x$35$$35$aRh$35$$35$k_$35$$35$270 () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792797003$35$$35$dST$35$$35$k_$35$$35$536 () Int)
(declare-fun lq_tmp$36$x$35$$35$150 () Int)
(declare-fun papp2 () Int)
(declare-fun VV$35$$35$F$35$$35$14 () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792797001$35$$35$dSR$35$$35$k_$35$$35$316 () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792796998$35$$35$dSO$35$$35$k_$35$$35$393 () Int)
(declare-fun x_Tuple62 () Int)
(declare-fun lq_karg$36$ds_dSw$35$$35$k_$35$$35$407 () Int)
(declare-fun lq_karg$36$ds_dSw$35$$35$k_$35$$35$267 () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792796998$35$$35$dSO$35$$35$k_$35$$35$396 () Int)
(declare-fun VV$35$$35$952 () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792797002$35$$35$dSS$35$$35$k_$35$$35$319 () Str)
(declare-fun lq_karg$36$q$35$$35$aRH$35$$35$k_$35$$35$393 () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792797003$35$$35$dST () Int)
(declare-fun lq_karg$36$VV$35$$35$425$35$$35$k_$35$$35$426 () Int)
(declare-fun VV$35$$35$767 () Int)
(declare-fun lq_karg$36$ds_dSw$35$$35$k_$35$$35$319 () Int)
(declare-fun lq_karg$36$VV$35$$35$311$35$$35$k_$35$$35$312 () Int)
(declare-fun Round1.Scanr.$36$trModule () Int)
(declare-fun lq_karg$36$x$35$$35$aRh$35$$35$k_$35$$35$536 () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792797000$35$$35$dSQ$35$$35$k_$35$$35$407 () Int)
(declare-fun lit$36$main () Str)
(declare-fun lq_karg$36$ds_dSw$35$$35$k_$35$$35$322 () Int)
(declare-fun VV$35$$35$F$35$$35$33 () Int)
(declare-fun lq_karg$36$ds_dSD$35$$35$k_$35$$35$536 () Int)
(declare-fun lq_karg$36$x$35$$35$aRh$35$$35$k_$35$$35$312 () Int)
(declare-fun lq_karg$36$VV$35$$35$315$35$$35$k_$35$$35$316 () Int)
(declare-fun lq_karg$36$xs$35$$35$aRi$35$$35$k_$35$$35$277 () Int)
(declare-fun lq_karg$36$q0$35$$35$aRe$35$$35$k_$35$$35$396 () Int)
(declare-fun VV$35$$35$622 () Int)
(declare-fun fromJust () Int)
(declare-fun lq_karg$36$VV$35$$35$395$35$$35$k_$35$$35$396 () Int)
(declare-fun lq_karg$36$q$35$$35$aRH$35$$35$k_$35$$35$540 () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792797000$35$$35$dSQ$35$$35$k_$35$$35$319 () Int)
(declare-fun lq_tmp$36$x$35$$35$111 () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792797002$35$$35$dSS$35$$35$k_$35$$35$322 () Str)
(declare-fun VV$35$$35$790 () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792797000$35$$35$dSQ$35$$35$k_$35$$35$322 () Int)
(declare-fun lq_karg$36$q0$35$$35$aRe$35$$35$k_$35$$35$419 () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792796998$35$$35$dSO$35$$35$k_$35$$35$419 () Int)
(declare-fun lq_karg$36$VV$35$$35$535$35$$35$k_$35$$35$536 () Int)
(declare-fun lq_karg$36$q0$35$$35$aRe$35$$35$k_$35$$35$260 () Int)
(declare-fun VV$35$$35$F$35$$35$8 () Int)
(declare-fun VV$35$$35$835 () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792796998$35$$35$dSO$35$$35$k_$35$$35$260 () Int)
(declare-fun lq_karg$36$x$35$$35$aRh$35$$35$k_$35$$35$329 () Int)
(declare-fun papp7 () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792797000$35$$35$dSQ$35$$35$k_$35$$35$267 () Int)
(declare-fun VV$35$$35$F$35$$35$11 () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792797000$35$$35$dSQ$35$$35$k_$35$$35$316 () Int)
(declare-fun xs$35$$35$aRi () Int)
(declare-fun lq_karg$36$q0$35$$35$aRe$35$$35$k_$35$$35$470 () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792796998$35$$35$dSO$35$$35$k_$35$$35$470 () Int)
(declare-fun VV$35$$35$F$35$$35$7 () Int)
(declare-fun lq_karg$36$x$35$$35$aRh$35$$35$k_$35$$35$326 () Int)
(declare-fun x_Tuple53 () Int)
(declare-fun lq_karg$36$q0$35$$35$aRe$35$$35$k_$35$$35$308 () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792797002$35$$35$dSS$35$$35$k_$35$$35$316 () Str)
(declare-fun lq_tmp$36$x$35$$35$262 () Int)
(declare-fun lq_karg$36$qs$35$$35$aRE$35$$35$k_$35$$35$536 () Int)
(declare-fun VV$35$$35$F$35$$35$25 () Int)
(declare-fun GHC.Types.$91$$93$ () Int)
(declare-fun lq_karg$36$xs$35$$35$aRi$35$$35$k_$35$$35$423 () Int)
(declare-fun lq_karg$36$ds_dSw$35$$35$k_$35$$35$316 () Int)
(declare-fun lq_karg$36$x$35$$35$aRh$35$$35$k_$35$$35$403 () Int)
(declare-fun x_Tuple71 () Int)
(declare-fun VV$35$$35$735 () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792796998$35$$35$dSO$35$$35$k_$35$$35$308 () Int)
(declare-fun GHC.Tuple.$40$$44$$41$ () Int)
(declare-fun VV$35$$35$771 () Int)
(declare-fun lq_karg$36$VV$35$$35$406$35$$35$k_$35$$35$407 () Int)
(declare-fun lq_karg$36$q0$35$$35$aRe$35$$35$k_$35$$35$170 () Int)
(declare-fun lq_karg$36$VV$35$$35$578$35$$35$k_$35$$35$579 () Int)
(declare-fun lq_karg$36$VV$35$$35$266$35$$35$k_$35$$35$267 () Int)
(declare-fun fldList () Int)
(declare-fun lq_karg$36$VV$35$$35$318$35$$35$k_$35$$35$319 () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792796998$35$$35$dSO$35$$35$k_$35$$35$170 () Int)
(declare-fun lq_tmp$36$x$35$$35$391 () Int)
(declare-fun lq_karg$36$xs$35$$35$aRi$35$$35$k_$35$$35$264 () Int)
(declare-fun VV$35$$35$F$35$$35$2 () Int)
(declare-fun lq_karg$36$lq_tmp$36$x$35$$35$262$35$$35$k_$35$$35$264 () Int)
(declare-fun lq_tmp$36$x$35$$35$542 () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792797001$35$$35$dSR$35$$35$k_$35$$35$319 () Int)
(declare-fun lq_karg$36$VV$35$$35$392$35$$35$k_$35$$35$393 () Int)
(declare-fun GHC.Types.GT () Int)
(declare-fun VV$35$$35$F$35$$35$20 () Int)
(declare-fun lq_karg$36$VV$35$$35$402$35$$35$k_$35$$35$403 () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792797000$35$$35$dSQ$35$$35$k_$35$$35$274 () Int)
(declare-fun lq_karg$36$lq_tmp$36$x$35$$35$409$35$$35$k_$35$$35$407 () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792797001$35$$35$dSR$35$$35$k_$35$$35$407 () Int)
(declare-fun lq_karg$36$xs$35$$35$aRi$35$$35$k_$35$$35$426 () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792797001$35$$35$dSR$35$$35$k_$35$$35$322 () Int)
(declare-fun x_Tuple74 () Int)
(declare-fun lq_karg$36$x$35$$35$aRh$35$$35$k_$35$$35$389 () Int)
(declare-fun lq_karg$36$ds_dSw$35$$35$k_$35$$35$274 () Int)
(declare-fun VV$35$$35$631 () Int)
(declare-fun qs$35$$35$aRE () Int)
(declare-fun lq_karg$36$VV$35$$35$422$35$$35$k_$35$$35$423 () Int)
(declare-fun lq_karg$36$VV$35$$35$318$35$$35$k_$35$$35$312 () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792797000$35$$35$dSQ$35$$35$k_$35$$35$389 () Int)
(declare-fun lq_karg$36$ds_dSw$35$$35$k_$35$$35$389 () Int)
(declare-fun lq_tmp$36$x$35$$35$110 () Int)
(declare-fun lq_karg$36$xs$35$$35$aRi$35$$35$k_$35$$35$308 () Int)
(declare-fun lq_tmp$36$x$35$$35$176 () Int)
(declare-fun lq_karg$36$x$35$$35$aRh$35$$35$k_$35$$35$274 () Int)
(declare-fun lq_karg$36$q0$35$$35$aRe$35$$35$k_$35$$35$423 () Int)
(declare-fun len () Int)
(declare-fun papp6 () Int)
(declare-fun VV$35$$35$F$35$$35$9 () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792796998$35$$35$dSO$35$$35$k_$35$$35$423 () Int)
(declare-fun VV$35$$35$F$35$$35$10 () Int)
(declare-fun x_Tuple22 () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792797001$35$$35$dSR$35$$35$k_$35$$35$312 () Int)
(declare-fun q0$35$$35$aRe () Int)
(declare-fun x_Tuple66 () Int)
(declare-fun x_Tuple44 () Int)
(declare-fun lq_karg$36$ds_dSL$35$$35$k_$35$$35$393 () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792796998$35$$35$dSO () Int)
(declare-fun VV$35$$35$F$35$$35$32 () Int)
(declare-fun lq_karg$36$xs$35$$35$aRi$35$$35$k_$35$$35$470 () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792797001$35$$35$dSR$35$$35$k_$35$$35$329 () Int)
(declare-fun VV$35$$35$887 () Int)
(declare-fun VV$35$$35$F$35$$35$26 () Int)
(declare-fun lq_karg$36$x$35$$35$aRh$35$$35$k_$35$$35$396 () Int)
(declare-fun lq_karg$36$q0$35$$35$aRe$35$$35$k_$35$$35$312 () Int)
(declare-fun lq_karg$36$qs$35$$35$aRE$35$$35$k_$35$$35$470 () Int)
(declare-fun lq_karg$36$VV$35$$35$273$35$$35$k_$35$$35$274 () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792796999$35$$35$dSP$35$$35$k_$35$$35$170 () Int)
(declare-fun x_Tuple72 () Int)
(declare-fun VV$35$$35$684 () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792796998$35$$35$dSO$35$$35$k_$35$$35$329 () Int)
(declare-fun lq_karg$36$VV$35$$35$276$35$$35$k_$35$$35$260 () Int)
(declare-fun isJust () Int)
(declare-fun lq_karg$36$ds_dSD$35$$35$k_$35$$35$419 () Int)
(declare-fun lq_karg$36$q0$35$$35$aRe$35$$35$k_$35$$35$536 () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792797003$35$$35$dST$35$$35$k_$35$$35$540 () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792796998$35$$35$dSO$35$$35$k_$35$$35$536 () Int)
(declare-fun lq_tmp$36$x$35$$35$566 () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792796998$35$$35$dSO$35$$35$k_$35$$35$312 () Int)
(declare-fun VV$35$$35$F$35$$35$4 () Int)
(declare-fun lq_karg$36$q0$35$$35$aRe$35$$35$k_$35$$35$329 () Int)
(declare-fun lq_tmp$36$x$35$$35$243 () Int)
(declare-fun lq_karg$36$VV$35$$35$143$35$$35$k_$35$$35$144 () Int)
(declare-fun lq_karg$36$x$35$$35$aRh$35$$35$k_$35$$35$419 () Int)
(declare-fun lq_karg$36$x$35$$35$aRh$35$$35$k_$35$$35$260 () Int)
(declare-fun VV$35$$35$904 () Int)
(declare-fun lq_karg$36$x$35$$35$aRh$35$$35$k_$35$$35$267 () Int)
(declare-fun VV$35$$35$959 () Int)
(declare-fun lq_tmp$36$db$35$$35$4 () Int)
(declare-fun lq_karg$36$xs$35$$35$aRi$35$$35$k_$35$$35$540 () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792797002$35$$35$dSS$35$$35$k_$35$$35$312 () Str)
(declare-fun lq_karg$36$VV$35$$35$169$35$$35$k_$35$$35$170 () Int)
(declare-fun VV$35$$35$F$35$$35$21 () Int)
(declare-fun VV$35$$35$894 () Int)
(declare-fun x_Tuple31 () Int)
(declare-fun lq_karg$36$ds_dSw$35$$35$k_$35$$35$312 () Int)
(declare-fun lq_karg$36$ds_dSw$35$$35$k_$35$$35$536 () Int)
(declare-fun lq_karg$36$ds_dSw$35$$35$k_$35$$35$329 () Int)
(declare-fun lq_karg$36$x$35$$35$aRh$35$$35$k_$35$$35$407 () Int)
(declare-fun lit$36$Round1.Scanr () Str)
(declare-fun x_Tuple75 () Int)
(declare-fun lq_karg$36$x$35$$35$aRh$35$$35$k_$35$$35$319 () Int)
(declare-fun VV$35$$35$731 () Int)
(declare-fun lq_karg$36$o$35$$35$$34$$47$Users$47$niki$47$liquidtypes$47$currentLH$47$liquidhaskell$47$tests$47$gradual$47$pos$47$GHCList$47$Round1$47$ScanrMono.hs$34$$32$$40$line$32$11$44$$32$column$32$83$41$ () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792797001$35$$35$dSR$35$$35$k_$35$$35$389 () Int)
(declare-fun lq_karg$36$xs$35$$35$aRi$35$$35$k_$35$$35$393 () Int)
(declare-fun lq_karg$36$VV$35$$35$276$35$$35$k_$35$$35$267 () Int)
(declare-fun VV$35$$35$858 () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792797000$35$$35$dSQ$35$$35$k_$35$$35$312 () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792797002$35$$35$dSS$35$$35$k_$35$$35$329 () Str)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792797000$35$$35$dSQ$35$$35$k_$35$$35$536 () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792797000$35$$35$dSQ$35$$35$k_$35$$35$329 () Int)
(declare-fun GHC.Types.TrNameS () Int)
(declare-fun VV$35$$35$F$35$$35$3 () Int)
(declare-fun lq_karg$36$x$35$$35$aRh$35$$35$k_$35$$35$322 () Int)
(declare-fun papp1 () Int)
(declare-fun lq_karg$36$q0$35$$35$aRe$35$$35$k_$35$$35$389 () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792797000$35$$35$dSQ$35$$35$k_$35$$35$423 () Int)
(declare-fun lq_karg$36$lq_tmp$36$x$35$$35$391$35$$35$k_$35$$35$393 () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792796998$35$$35$dSO$35$$35$k_$35$$35$389 () Int)
(declare-fun VV$35$$35$F$35$$35$17 () Int)
(declare-fun x_Tuple61 () Int)
(declare-fun lq_karg$36$ds_dSw$35$$35$k_$35$$35$423 () Int)
(declare-fun x_Tuple43 () Int)
(declare-fun ds_dSw () Int)
(declare-fun VV$35$$35$707 () Int)
(declare-fun lq_karg$36$lq_tmp$36$x$35$$35$324$35$$35$k_$35$$35$326 () Int)
(declare-fun tail () Int)
(declare-fun lq_karg$36$q$35$$35$aRH$35$$35$k_$35$$35$403 () Int)
(declare-fun lq_karg$36$VV$35$$35$328$35$$35$k_$35$$35$316 () Int)
(declare-fun lq_karg$36$VV$35$$35$395$35$$35$k_$35$$35$389 () Int)
(declare-fun lq_karg$36$lq_tmp$36$x$35$$35$421$35$$35$k_$35$$35$423 () Int)
(declare-fun lq_karg$36$lq_tmp$36$x$35$$35$542$35$$35$k_$35$$35$540 () Int)
(declare-fun lq_tmp$36$x$35$$35$272 () Int)
(declare-fun lq_karg$36$xs$35$$35$aRi$35$$35$k_$35$$35$316 () Int)
(declare-fun lq_karg$36$qs$35$$35$aRE$35$$35$k_$35$$35$540 () Int)
(declare-fun lq_karg$36$VV$35$$35$266$35$$35$k_$35$$35$260 () Int)
(declare-fun lq_karg$36$lq_tmp$36$x$35$$35$150$35$$35$k_$35$$35$148 () Int)
(declare-fun lq_karg$36$q0$35$$35$aRe$35$$35$k_$35$$35$274 () Int)
(declare-fun ds_dSL () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792796998$35$$35$dSO$35$$35$k_$35$$35$274 () Int)
(declare-fun lq_karg$36$ds_dSD$35$$35$k_$35$$35$423 () Int)
(declare-fun VV$35$$35$F$35$$35$5 () Int)
(declare-fun x_Tuple51 () Int)
(declare-fun lq_tmp$36$db$35$$35$2 () Int)
(declare-fun lq_karg$36$i$35$$35$$34$$47$Users$47$niki$47$liquidtypes$47$currentLH$47$liquidhaskell$47$tests$47$gradual$47$pos$47$GHCList$47$Round1$47$ScanrMono.hs$34$$32$$40$line$32$11$44$$32$column$32$83$41$ () Int)
(declare-fun lq_karg$36$xs$35$$35$aRi$35$$35$k_$35$$35$326 () Int)
(declare-fun VV$35$$35$F$35$$35$27 () Int)
(declare-fun lq_karg$36$xs$35$$35$aRi$35$$35$k_$35$$35$403 () Int)
(declare-fun lq_karg$36$x$35$$35$aRh$35$$35$k_$35$$35$423 () Int)
(declare-fun x_Tuple73 () Int)
(declare-fun GHC.Types.EQ () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792797001$35$$35$dSR$35$$35$k_$35$$35$396 () Int)
(declare-fun lq_karg$36$ds_dSw$35$$35$k_$35$$35$170 () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792797001$35$$35$dSR$35$$35$k_$35$$35$393 () Int)
(declare-fun VV$35$$35$710 () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792797007$35$$35$dSX () Int)
(declare-fun lq_karg$36$VV$35$$35$325$35$$35$k_$35$$35$326 () Int)
(declare-fun lq_karg$36$VV$35$$35$276$35$$35$k_$35$$35$264 () Int)
(declare-fun VV$35$$35$754 () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792797000$35$$35$dSQ$35$$35$k_$35$$35$470 () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792797002$35$$35$dSS$35$$35$k_$35$$35$308 () Str)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792796998$35$$35$dSO$35$$35$k_$35$$35$316 () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792797000$35$$35$dSQ$35$$35$k_$35$$35$308 () Int)
(declare-fun lq_karg$36$ds_dSD$35$$35$k_$35$$35$426 () Int)
(declare-fun x_Tuple54 () Int)
(declare-fun VV$35$$35$943 () Int)
(declare-fun VV$35$$35$F$35$$35$19 () Int)
(declare-fun lq_karg$36$ds_dSw$35$$35$k_$35$$35$308 () Int)
(declare-fun lq_karg$36$VV$35$$35$321$35$$35$k_$35$$35$322 () Int)
(declare-fun lq_karg$36$x$35$$35$aRh$35$$35$k_$35$$35$264 () Int)
(declare-fun lq_tmp$36$x$35$$35$238 () Int)
(declare-fun VV$35$$35$F$35$$35$22 () Int)
(declare-fun lq_karg$36$ds_dSw$35$$35$k_$35$$35$470 () Int)
(declare-fun lq_karg$36$q0$35$$35$aRe$35$$35$k_$35$$35$316 () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792796999$35$$35$dSP$35$$35$k_$35$$35$174 () Int)
(declare-fun x_Tuple32 () Int)
(declare-fun lq_karg$36$xs$35$$35$aRi$35$$35$k_$35$$35$389 () Int)
(declare-fun lq_karg$36$x$35$$35$aRh$35$$35$k_$35$$35$426 () Int)
(declare-fun x_Tuple76 () Int)
(declare-fun VV$35$$35$680 () Int)
(declare-fun lq_karg$36$ds_dSw$35$$35$k_$35$$35$419 () Int)
(declare-fun VV$35$$35$881 () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792796998$35$$35$dSO$35$$35$k_$35$$35$407 () Int)
(declare-fun lq_karg$36$xs$35$$35$aRi$35$$35$k_$35$$35$270 () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792796998$35$$35$dSO$35$$35$k_$35$$35$322 () Int)
(declare-fun VV$35$$35$607 () Int)
(declare-fun lq_tmp$36$x$35$$35$314 () Int)
(declare-fun VV$35$$35$933 () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792796998$35$$35$dSO$35$$35$k_$35$$35$319 () Int)
(declare-fun lq_karg$36$q0$35$$35$aRe$35$$35$k_$35$$35$267 () Int)
(declare-fun VV$35$$35$810 () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792796998$35$$35$dSO$35$$35$k_$35$$35$267 () Int)
(declare-fun lq_karg$36$q0$35$$35$aRe$35$$35$k_$35$$35$407 () Int)
(declare-fun lq_karg$36$ds_dSw$35$$35$k_$35$$35$396 () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792797000$35$$35$dSQ$35$$35$k_$35$$35$260 () Int)
(declare-fun VV$35$$35$F$35$$35$16 () Int)
(declare-fun snd () Int)
(declare-fun fst () Int)
(declare-fun lq_karg$36$q0$35$$35$aRe$35$$35$k_$35$$35$322 () Int)
(declare-fun lq_karg$36$ds_dSw$35$$35$k_$35$$35$260 () Int)
(declare-fun x_Tuple42 () Int)
(declare-fun lq_karg$36$ds_dSL$35$$35$k_$35$$35$403 () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792796999$35$$35$dSP () Int)
(declare-fun lq_tmp$36$x$35$$35$237 () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792797000$35$$35$dSQ$35$$35$k_$35$$35$419 () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792797000$35$$35$dSQ$35$$35$k_$35$$35$396 () Int)
(declare-fun lq_karg$36$q0$35$$35$aRe$35$$35$k_$35$$35$319 () Int)
(declare-fun apply$35$$35$13 (Int (_ BitVec 32)) Bool)
(declare-fun apply$35$$35$9 (Int Str) Bool)
(declare-fun apply$35$$35$6 (Int Bool) Str)
(declare-fun apply$35$$35$11 (Int Str) (_ BitVec 32))
(declare-fun apply$35$$35$15 (Int (_ BitVec 32)) (_ BitVec 32))
(declare-fun apply$35$$35$0 (Int Int) Int)
(declare-fun apply$35$$35$8 (Int Str) Int)
(declare-fun apply$35$$35$1 (Int Int) Bool)
(declare-fun apply$35$$35$7 (Int Bool) (_ BitVec 32))
(declare-fun apply$35$$35$14 (Int (_ BitVec 32)) Str)
(declare-fun apply$35$$35$10 (Int Str) Str)
(declare-fun apply$35$$35$5 (Int Bool) Bool)
(declare-fun apply$35$$35$2 (Int Int) Str)
(declare-fun apply$35$$35$12 (Int (_ BitVec 32)) Int)
(declare-fun apply$35$$35$3 (Int Int) (_ BitVec 32))
(declare-fun apply$35$$35$4 (Int Bool) Int)
(declare-fun smt_lambda$35$$35$13 ((_ BitVec 32) Bool) Int)
(declare-fun smt_lambda$35$$35$9 (Str Bool) Int)
(declare-fun smt_lambda$35$$35$6 (Bool Str) Int)
(declare-fun smt_lambda$35$$35$11 (Str (_ BitVec 32)) Int)
(declare-fun smt_lambda$35$$35$15 ((_ BitVec 32) (_ BitVec 32)) Int)
(declare-fun smt_lambda$35$$35$0 (Int Int) Int)
(declare-fun smt_lambda$35$$35$8 (Str Int) Int)
(declare-fun smt_lambda$35$$35$1 (Int Bool) Int)
(declare-fun smt_lambda$35$$35$7 (Bool (_ BitVec 32)) Int)
(declare-fun smt_lambda$35$$35$14 ((_ BitVec 32) Str) Int)
(declare-fun smt_lambda$35$$35$10 (Str Str) Int)
(declare-fun smt_lambda$35$$35$5 (Bool Bool) Int)
(declare-fun smt_lambda$35$$35$2 (Int Str) Int)
(declare-fun smt_lambda$35$$35$12 ((_ BitVec 32) Int) Int)
(declare-fun smt_lambda$35$$35$3 (Int (_ BitVec 32)) Int)
(declare-fun smt_lambda$35$$35$4 (Bool Int) Int)
(declare-fun lam_arg$35$$35$1$35$$35$0 () Int)
(declare-fun lam_arg$35$$35$2$35$$35$0 () Int)
(declare-fun lam_arg$35$$35$3$35$$35$0 () Int)
(declare-fun lam_arg$35$$35$4$35$$35$0 () Int)
(declare-fun lam_arg$35$$35$5$35$$35$0 () Int)
(declare-fun lam_arg$35$$35$6$35$$35$0 () Int)
(declare-fun lam_arg$35$$35$7$35$$35$0 () Int)
(declare-fun lam_arg$35$$35$1$35$$35$8 () Str)
(declare-fun lam_arg$35$$35$2$35$$35$8 () Str)
(declare-fun lam_arg$35$$35$3$35$$35$8 () Str)
(declare-fun lam_arg$35$$35$4$35$$35$8 () Str)
(declare-fun lam_arg$35$$35$5$35$$35$8 () Str)
(declare-fun lam_arg$35$$35$6$35$$35$8 () Str)
(declare-fun lam_arg$35$$35$7$35$$35$8 () Str)
(declare-fun lam_arg$35$$35$1$35$$35$12 () (_ BitVec 32))
(declare-fun lam_arg$35$$35$2$35$$35$12 () (_ BitVec 32))
(declare-fun lam_arg$35$$35$3$35$$35$12 () (_ BitVec 32))
(declare-fun lam_arg$35$$35$4$35$$35$12 () (_ BitVec 32))
(declare-fun lam_arg$35$$35$5$35$$35$12 () (_ BitVec 32))
(declare-fun lam_arg$35$$35$6$35$$35$12 () (_ BitVec 32))
(declare-fun lam_arg$35$$35$7$35$$35$12 () (_ BitVec 32))
(declare-fun lam_arg$35$$35$1$35$$35$4 () Bool)
(declare-fun lam_arg$35$$35$2$35$$35$4 () Bool)
(declare-fun lam_arg$35$$35$3$35$$35$4 () Bool)
(declare-fun lam_arg$35$$35$4$35$$35$4 () Bool)
(declare-fun lam_arg$35$$35$5$35$$35$4 () Bool)
(declare-fun lam_arg$35$$35$6$35$$35$4 () Bool)
(declare-fun lam_arg$35$$35$7$35$$35$4 () Bool)
(assert (distinct lit$36$Round1.Scanr lit$36$main lit$36$$47$Users$47$niki$47$liquidtypes$47$currentLH$47$liquidhaskell$47$tests$47$gradual$47$pos$47$GHCList$47$Round1$47$ScanrMono.hs$58$15$58$34$45$57$124$qs$64$$40$q$32$$58$$32$_$41$))
(assert (distinct GHC.Types.EQ GHC.Types.GT GHC.Types.LT))
(assert (= (strLen lit$36$$47$Users$47$niki$47$liquidtypes$47$currentLH$47$liquidhaskell$47$tests$47$gradual$47$pos$47$GHCList$47$Round1$47$ScanrMono.hs$58$15$58$34$45$57$124$qs$64$$40$q$32$$58$$32$_$41$) 113))
(assert (= (strLen lit$36$main) 4))
(assert (= (strLen lit$36$Round1.Scanr) 12))
(push 1)
(assert (not (exists ((lq_karg$36$o$35$$35$$34$$47$Users$47$niki$47$liquidtypes$47$currentLH$47$liquidhaskell$47$tests$47$gradual$47$pos$47$GHCList$47$Round1$47$ScanrMono.hs$34$$32$$40$line$32$11$44$$32$column$32$83$41$ Int)) true)))
(check-sat)
; SMT Says: Unsat
(pop 1)
(push 1)
(assert (not (exists ((lq_karg$36$o$35$$35$$34$$47$Users$47$niki$47$liquidtypes$47$currentLH$47$liquidhaskell$47$tests$47$gradual$47$pos$47$GHCList$47$Round1$47$ScanrMono.hs$34$$32$$40$line$32$11$44$$32$column$32$83$41$ Int)) (and (= lq_karg$36$o$35$$35$$34$$47$Users$47$niki$47$liquidtypes$47$currentLH$47$liquidhaskell$47$tests$47$gradual$47$pos$47$GHCList$47$Round1$47$ScanrMono.hs$34$$32$$40$line$32$11$44$$32$column$32$83$41$ lq_karg$36$i$35$$35$$34$$47$Users$47$niki$47$liquidtypes$47$currentLH$47$liquidhaskell$47$tests$47$gradual$47$pos$47$GHCList$47$Round1$47$ScanrMono.hs$34$$32$$40$line$32$11$44$$32$column$32$83$41$)))))
(check-sat)
; SMT Says: Unsat
(pop 1)
(push 1)
(assert (not (exists ((len$32$o Int)) (exists ((lq_karg$36$o$35$$35$$34$$47$Users$47$niki$47$liquidtypes$47$currentLH$47$liquidhaskell$47$tests$47$gradual$47$pos$47$GHCList$47$Round1$47$ScanrMono.hs$34$$32$$40$line$32$11$44$$32$column$32$83$41$ Int)) (and (= len$32$o (+ 1 (apply$35$$35$0 (as len Int) lq_karg$36$i$35$$35$$34$$47$Users$47$niki$47$liquidtypes$47$currentLH$47$liquidhaskell$47$tests$47$gradual$47$pos$47$GHCList$47$Round1$47$ScanrMono.hs$34$$32$$40$line$32$11$44$$32$column$32$83$41$))))))))
(check-sat)
; SMT Says: Unsat
(pop 1)
(push 1)
(assert (not (exists ((tail$32$o Int)) (exists ((lq_karg$36$o$35$$35$$34$$47$Users$47$niki$47$liquidtypes$47$currentLH$47$liquidhaskell$47$tests$47$gradual$47$pos$47$GHCList$47$Round1$47$ScanrMono.hs$34$$32$$40$line$32$11$44$$32$column$32$83$41$ Int)) (and (= tail$32$o lq_karg$36$i$35$$35$$34$$47$Users$47$niki$47$liquidtypes$47$currentLH$47$liquidhaskell$47$tests$47$gradual$47$pos$47$GHCList$47$Round1$47$ScanrMono.hs$34$$32$$40$line$32$11$44$$32$column$32$83$41$))))))
(check-sat)
; SMT Says: Unsat
(pop 1)
(push 1)
(assert (not (exists ((head$32$o Int)) (exists ((lq_karg$36$o$35$$35$$34$$47$Users$47$niki$47$liquidtypes$47$currentLH$47$liquidhaskell$47$tests$47$gradual$47$pos$47$GHCList$47$Round1$47$ScanrMono.hs$34$$32$$40$line$32$11$44$$32$column$32$83$41$ Int)) (and (= head$32$o lq_karg$36$lq_tmp$36$db$35$$35$4$35$$35$$34$$47$Users$47$niki$47$liquidtypes$47$currentLH$47$liquidhaskell$47$tests$47$gradual$47$pos$47$GHCList$47$Round1$47$ScanrMono.hs$34$$32$$40$line$32$11$44$$32$column$32$83$41$))))))
(check-sat)
; SMT Says: Unsat
(pop 1)
(push 1)
(assert (not (exists ((len$32$o Int)) (exists ((lq_karg$36$o$35$$35$$34$$47$Users$47$niki$47$liquidtypes$47$currentLH$47$liquidhaskell$47$tests$47$gradual$47$pos$47$GHCList$47$Round1$47$ScanrMono.hs$34$$32$$40$line$32$11$44$$32$column$32$83$41$ Int)) (and (= len$32$o 0))))))
(check-sat)
; SMT Says: Unsat
(pop 1)
(push 1)
(assert (not (exists ((len$32$o Int)) (exists ((lq_karg$36$o$35$$35$$34$$47$Users$47$niki$47$liquidtypes$47$currentLH$47$liquidhaskell$47$tests$47$gradual$47$pos$47$GHCList$47$Round1$47$ScanrMono.hs$34$$32$$40$line$32$11$44$$32$column$32$83$41$ Int)) (and (>= len$32$o 0))))))
(check-sat)
; SMT Says: Unsat
(pop 1)
(push 1)
(assert (not (exists ((len$32$o Int)) (exists ((lq_karg$36$o$35$$35$$34$$47$Users$47$niki$47$liquidtypes$47$currentLH$47$liquidhaskell$47$tests$47$gradual$47$pos$47$GHCList$47$Round1$47$ScanrMono.hs$34$$32$$40$line$32$11$44$$32$column$32$83$41$ Int)) (and (> len$32$o 0))))))
(check-sat)
; SMT Says: Unsat
(pop 1)
(push 1)
(assert (not (exists ((len$32$i Int)) (exists ((lq_karg$36$o$35$$35$$34$$47$Users$47$niki$47$liquidtypes$47$currentLH$47$liquidhaskell$47$tests$47$gradual$47$pos$47$GHCList$47$Round1$47$ScanrMono.hs$34$$32$$40$line$32$11$44$$32$column$32$83$41$ Int)) (and (= len$32$o len$32$i))))))
(check-sat)
; SMT Says: Error "line 542 column 259: unknown constant len$32$o"
(pop 1)
(push 1)
(assert (not (exists ((len$32$i Int)) (exists ((lq_karg$36$o$35$$35$$34$$47$Users$47$niki$47$liquidtypes$47$currentLH$47$liquidhaskell$47$tests$47$gradual$47$pos$47$GHCList$47$Round1$47$ScanrMono.hs$34$$32$$40$line$32$11$44$$32$column$32$83$41$ Int)) (and (>= len$32$o len$32$i))))))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (exists ((len$32$i Int)) (exists ((lq_karg$36$o$35$$35$$34$$47$Users$47$niki$47$liquidtypes$47$currentLH$47$liquidhaskell$47$tests$47$gradual$47$pos$47$GHCList$47$Round1$47$ScanrMono.hs$34$$32$$40$line$32$11$44$$32$column$32$83$41$ Int)) (and (> len$32$o len$32$i))))))
(check-sat)
; SMT Says: Error "line 546 column 260: unknown constant len$32$o"
(pop 1)
(push 1)
(assert (not (exists ((len$32$i Int)) (exists ((lq_karg$36$o$35$$35$$34$$47$Users$47$niki$47$liquidtypes$47$currentLH$47$liquidhaskell$47$tests$47$gradual$47$pos$47$GHCList$47$Round1$47$ScanrMono.hs$34$$32$$40$line$32$11$44$$32$column$32$83$41$ Int)) (and (<= len$32$o len$32$i))))))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (exists ((len$32$i Int)) (exists ((lq_karg$36$o$35$$35$$34$$47$Users$47$niki$47$liquidtypes$47$currentLH$47$liquidhaskell$47$tests$47$gradual$47$pos$47$GHCList$47$Round1$47$ScanrMono.hs$34$$32$$40$line$32$11$44$$32$column$32$83$41$ Int)) (and (< len$32$o len$32$i))))))
(check-sat)
; SMT Says: Error "line 550 column 259: unknown constant len$32$o"
(pop 1)
(push 1)
(assert (not (exists ((len$32$o Int)) (exists ((lq_karg$36$o$35$$35$$34$$47$Users$47$niki$47$liquidtypes$47$currentLH$47$liquidhaskell$47$tests$47$gradual$47$pos$47$GHCList$47$Round1$47$ScanrMono.hs$34$$32$$40$line$32$11$44$$32$column$32$83$41$ Int)) (and (= lq_karg$36$lq_tmp$36$db$35$$35$4$35$$35$$34$$47$Users$47$niki$47$liquidtypes$47$currentLH$47$liquidhaskell$47$tests$47$gradual$47$pos$47$GHCList$47$Round1$47$ScanrMono.hs$34$$32$$40$line$32$11$44$$32$column$32$83$41$ len$32$o))))))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (exists ((len$32$o Int)) (exists ((lq_karg$36$o$35$$35$$34$$47$Users$47$niki$47$liquidtypes$47$currentLH$47$liquidhaskell$47$tests$47$gradual$47$pos$47$GHCList$47$Round1$47$ScanrMono.hs$34$$32$$40$line$32$11$44$$32$column$32$83$41$ Int)) (and (= len$32$o (+ lq_karg$36$lq_tmp$36$db$35$$35$4$35$$35$$34$$47$Users$47$niki$47$liquidtypes$47$currentLH$47$liquidhaskell$47$tests$47$gradual$47$pos$47$GHCList$47$Round1$47$ScanrMono.hs$34$$32$$40$line$32$11$44$$32$column$32$83$41$ 1)))))))
(check-sat)
; SMT Says: Error "line 554 column 260: unknown constant len$32$o"
(pop 1)
(push 1)
(assert (not (exists ((len$32$o Int)) (exists ((lq_karg$36$o$35$$35$$34$$47$Users$47$niki$47$liquidtypes$47$currentLH$47$liquidhaskell$47$tests$47$gradual$47$pos$47$GHCList$47$Round1$47$ScanrMono.hs$34$$32$$40$line$32$11$44$$32$column$32$83$41$ Int)) (and (= len$32$o (- lq_karg$36$lq_tmp$36$db$35$$35$4$35$$35$$34$$47$Users$47$niki$47$liquidtypes$47$currentLH$47$liquidhaskell$47$tests$47$gradual$47$pos$47$GHCList$47$Round1$47$ScanrMono.hs$34$$32$$40$line$32$11$44$$32$column$32$83$41$ 1)))))))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (exists ((lq_karg$36$o$35$$35$$34$$47$Users$47$niki$47$liquidtypes$47$currentLH$47$liquidhaskell$47$tests$47$gradual$47$pos$47$GHCList$47$Round1$47$ScanrMono.hs$34$$32$$40$line$32$11$44$$32$column$32$83$41$ Int)) (and (= 0 1)))))
(check-sat)
; SMT Says: Error "line 558 column 259: unknown constant len$32$o"
(pop 1)
(push 1)
(assert (not (exists ((lq_karg$36$o$35$$35$$34$$47$Users$47$niki$47$liquidtypes$47$currentLH$47$liquidhaskell$47$tests$47$gradual$47$pos$47$GHCList$47$Round1$47$ScanrMono.hs$34$$32$$40$line$32$11$44$$32$column$32$83$41$ Int)) (and (< lq_karg$36$o$35$$35$$34$$47$Users$47$niki$47$liquidtypes$47$currentLH$47$liquidhaskell$47$tests$47$gradual$47$pos$47$GHCList$47$Round1$47$ScanrMono.hs$34$$32$$40$line$32$11$44$$32$column$32$83$41$ lq_karg$36$i$35$$35$$34$$47$Users$47$niki$47$liquidtypes$47$currentLH$47$liquidhaskell$47$tests$47$gradual$47$pos$47$GHCList$47$Round1$47$ScanrMono.hs$34$$32$$40$line$32$11$44$$32$column$32$83$41$)))))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (exists ((lq_karg$36$o$35$$35$$34$$47$Users$47$niki$47$liquidtypes$47$currentLH$47$liquidhaskell$47$tests$47$gradual$47$pos$47$GHCList$47$Round1$47$ScanrMono.hs$34$$32$$40$line$32$11$44$$32$column$32$83$41$ Int)) (and (<= lq_karg$36$o$35$$35$$34$$47$Users$47$niki$47$liquidtypes$47$currentLH$47$liquidhaskell$47$tests$47$gradual$47$pos$47$GHCList$47$Round1$47$ScanrMono.hs$34$$32$$40$line$32$11$44$$32$column$32$83$41$ lq_karg$36$i$35$$35$$34$$47$Users$47$niki$47$liquidtypes$47$currentLH$47$liquidhaskell$47$tests$47$gradual$47$pos$47$GHCList$47$Round1$47$ScanrMono.hs$34$$32$$40$line$32$11$44$$32$column$32$83$41$)))))
(check-sat)
; SMT Says: Unsat
(pop 1)
(push 1)
(assert (not (exists ((lq_karg$36$o$35$$35$$34$$47$Users$47$niki$47$liquidtypes$47$currentLH$47$liquidhaskell$47$tests$47$gradual$47$pos$47$GHCList$47$Round1$47$ScanrMono.hs$34$$32$$40$line$32$11$44$$32$column$32$83$41$ Int)) (and (> lq_karg$36$o$35$$35$$34$$47$Users$47$niki$47$liquidtypes$47$currentLH$47$liquidhaskell$47$tests$47$gradual$47$pos$47$GHCList$47$Round1$47$ScanrMono.hs$34$$32$$40$line$32$11$44$$32$column$32$83$41$ lq_karg$36$i$35$$35$$34$$47$Users$47$niki$47$liquidtypes$47$currentLH$47$liquidhaskell$47$tests$47$gradual$47$pos$47$GHCList$47$Round1$47$ScanrMono.hs$34$$32$$40$line$32$11$44$$32$column$32$83$41$)))))
(check-sat)
; SMT Says: Unsat
(pop 1)
(push 1)
(assert (not (exists ((lq_karg$36$o$35$$35$$34$$47$Users$47$niki$47$liquidtypes$47$currentLH$47$liquidhaskell$47$tests$47$gradual$47$pos$47$GHCList$47$Round1$47$ScanrMono.hs$34$$32$$40$line$32$11$44$$32$column$32$83$41$ Int)) (and (>= lq_karg$36$o$35$$35$$34$$47$Users$47$niki$47$liquidtypes$47$currentLH$47$liquidhaskell$47$tests$47$gradual$47$pos$47$GHCList$47$Round1$47$ScanrMono.hs$34$$32$$40$line$32$11$44$$32$column$32$83$41$ lq_karg$36$i$35$$35$$34$$47$Users$47$niki$47$liquidtypes$47$currentLH$47$liquidhaskell$47$tests$47$gradual$47$pos$47$GHCList$47$Round1$47$ScanrMono.hs$34$$32$$40$line$32$11$44$$32$column$32$83$41$)))))
(check-sat)
; SMT Says: Unsat
(pop 1)
(push 1)
(assert (not (exists ((lq_karg$36$o$35$$35$$34$$47$Users$47$niki$47$liquidtypes$47$currentLH$47$liquidhaskell$47$tests$47$gradual$47$pos$47$GHCList$47$Round1$47$ScanrMono.hs$34$$32$$40$line$32$11$44$$32$column$32$83$41$ Int)) (and (not (= lq_karg$36$o$35$$35$$34$$47$Users$47$niki$47$liquidtypes$47$currentLH$47$liquidhaskell$47$tests$47$gradual$47$pos$47$GHCList$47$Round1$47$ScanrMono.hs$34$$32$$40$line$32$11$44$$32$column$32$83$41$ lq_karg$36$i$35$$35$$34$$47$Users$47$niki$47$liquidtypes$47$currentLH$47$liquidhaskell$47$tests$47$gradual$47$pos$47$GHCList$47$Round1$47$ScanrMono.hs$34$$32$$40$line$32$11$44$$32$column$32$83$41$))))))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (=> true true)))
(check-sat)
; SMT Says: Unsat
(pop 1)
(push 1)
(assert (not (=> (and (= lq_karg$36$o$35$$35$$34$$47$Users$47$niki$47$liquidtypes$47$currentLH$47$liquidhaskell$47$tests$47$gradual$47$pos$47$GHCList$47$Round1$47$ScanrMono.hs$34$$32$$40$line$32$11$44$$32$column$32$83$41$ lq_karg$36$i$35$$35$$34$$47$Users$47$niki$47$liquidtypes$47$currentLH$47$liquidhaskell$47$tests$47$gradual$47$pos$47$GHCList$47$Round1$47$ScanrMono.hs$34$$32$$40$line$32$11$44$$32$column$32$83$41$)) true)))
(check-sat)
; SMT Says: Unsat
(pop 1)
(push 1)
(assert (not (=> (and (= (apply$35$$35$0 (as len Int) lq_karg$36$o$35$$35$$34$$47$Users$47$niki$47$liquidtypes$47$currentLH$47$liquidhaskell$47$tests$47$gradual$47$pos$47$GHCList$47$Round1$47$ScanrMono.hs$34$$32$$40$line$32$11$44$$32$column$32$83$41$) (+ 1 (apply$35$$35$0 (as len Int) lq_karg$36$i$35$$35$$34$$47$Users$47$niki$47$liquidtypes$47$currentLH$47$liquidhaskell$47$tests$47$gradual$47$pos$47$GHCList$47$Round1$47$ScanrMono.hs$34$$32$$40$line$32$11$44$$32$column$32$83$41$)))) true)))
(check-sat)
; SMT Says: Unsat
(pop 1)
(push 1)
(assert (not (=> (and (= (apply$35$$35$0 (as tail Int) lq_karg$36$o$35$$35$$34$$47$Users$47$niki$47$liquidtypes$47$currentLH$47$liquidhaskell$47$tests$47$gradual$47$pos$47$GHCList$47$Round1$47$ScanrMono.hs$34$$32$$40$line$32$11$44$$32$column$32$83$41$) lq_karg$36$i$35$$35$$34$$47$Users$47$niki$47$liquidtypes$47$currentLH$47$liquidhaskell$47$tests$47$gradual$47$pos$47$GHCList$47$Round1$47$ScanrMono.hs$34$$32$$40$line$32$11$44$$32$column$32$83$41$)) true)))
(check-sat)
; SMT Says: Unsat
(pop 1)
(push 1)
(assert (not (=> (and (= (apply$35$$35$0 (as head Int) lq_karg$36$o$35$$35$$34$$47$Users$47$niki$47$liquidtypes$47$currentLH$47$liquidhaskell$47$tests$47$gradual$47$pos$47$GHCList$47$Round1$47$ScanrMono.hs$34$$32$$40$line$32$11$44$$32$column$32$83$41$) lq_karg$36$lq_tmp$36$db$35$$35$4$35$$35$$34$$47$Users$47$niki$47$liquidtypes$47$currentLH$47$liquidhaskell$47$tests$47$gradual$47$pos$47$GHCList$47$Round1$47$ScanrMono.hs$34$$32$$40$line$32$11$44$$32$column$32$83$41$)) true)))
(check-sat)
; SMT Says: Unknown
(pop 1)
(push 1)
(assert (not (=> (and (= (apply$35$$35$0 (as len Int) lq_karg$36$o$35$$35$$34$$47$Users$47$niki$47$liquidtypes$47$currentLH$47$liquidhaskell$47$tests$47$gradual$47$pos$47$GHCList$47$Round1$47$ScanrMono.hs$34$$32$$40$line$32$11$44$$32$column$32$83$41$) 0)) true)))
(check-sat)
; SMT Says: Unsat
(pop 1)
(push 1)
(assert (not (=> (and (>= (apply$35$$35$0 (as len Int) lq_karg$36$o$35$$35$$34$$47$Users$47$niki$47$liquidtypes$47$currentLH$47$liquidhaskell$47$tests$47$gradual$47$pos$47$GHCList$47$Round1$47$ScanrMono.hs$34$$32$$40$line$32$11$44$$32$column$32$83$41$) 0)) true)))
(check-sat)
; SMT Says: Unsat
(pop 1)
(push 1)
(assert (not (=> (and (> (apply$35$$35$0 (as len Int) lq_karg$36$o$35$$35$$34$$47$Users$47$niki$47$liquidtypes$47$currentLH$47$liquidhaskell$47$tests$47$gradual$47$pos$47$GHCList$47$Round1$47$ScanrMono.hs$34$$32$$40$line$32$11$44$$32$column$32$83$41$) 0)) true)))
(check-sat)
; SMT Says: Unsat
(pop 1)
(push 1)
(assert (not (=> (and (= (apply$35$$35$0 (as len Int) lq_karg$36$o$35$$35$$34$$47$Users$47$niki$47$liquidtypes$47$currentLH$47$liquidhaskell$47$tests$47$gradual$47$pos$47$GHCList$47$Round1$47$ScanrMono.hs$34$$32$$40$line$32$11$44$$32$column$32$83$41$) (apply$35$$35$0 (as len Int) lq_karg$36$i$35$$35$$34$$47$Users$47$niki$47$liquidtypes$47$currentLH$47$liquidhaskell$47$tests$47$gradual$47$pos$47$GHCList$47$Round1$47$ScanrMono.hs$34$$32$$40$line$32$11$44$$32$column$32$83$41$))) true)))
(check-sat)
; SMT Says: Unsat
(pop 1)
(push 1)
(assert (not (=> (and (> (apply$35$$35$0 (as len Int) lq_karg$36$o$35$$35$$34$$47$Users$47$niki$47$liquidtypes$47$currentLH$47$liquidhaskell$47$tests$47$gradual$47$pos$47$GHCList$47$Round1$47$ScanrMono.hs$34$$32$$40$line$32$11$44$$32$column$32$83$41$) (apply$35$$35$0 (as len Int) lq_karg$36$i$35$$35$$34$$47$Users$47$niki$47$liquidtypes$47$currentLH$47$liquidhaskell$47$tests$47$gradual$47$pos$47$GHCList$47$Round1$47$ScanrMono.hs$34$$32$$40$line$32$11$44$$32$column$32$83$41$))) true)))
(check-sat)
; SMT Says: Unsat
(pop 1)
(push 1)
(assert (not (=> (and (< (apply$35$$35$0 (as len Int) lq_karg$36$o$35$$35$$34$$47$Users$47$niki$47$liquidtypes$47$currentLH$47$liquidhaskell$47$tests$47$gradual$47$pos$47$GHCList$47$Round1$47$ScanrMono.hs$34$$32$$40$line$32$11$44$$32$column$32$83$41$) (apply$35$$35$0 (as len Int) lq_karg$36$i$35$$35$$34$$47$Users$47$niki$47$liquidtypes$47$currentLH$47$liquidhaskell$47$tests$47$gradual$47$pos$47$GHCList$47$Round1$47$ScanrMono.hs$34$$32$$40$line$32$11$44$$32$column$32$83$41$))) true)))
(check-sat)
; SMT Says: Unsat
(pop 1)
(push 1)
(assert (not (=> (and (= (apply$35$$35$0 (as len Int) lq_karg$36$o$35$$35$$34$$47$Users$47$niki$47$liquidtypes$47$currentLH$47$liquidhaskell$47$tests$47$gradual$47$pos$47$GHCList$47$Round1$47$ScanrMono.hs$34$$32$$40$line$32$11$44$$32$column$32$83$41$) (+ lq_karg$36$lq_tmp$36$db$35$$35$4$35$$35$$34$$47$Users$47$niki$47$liquidtypes$47$currentLH$47$liquidhaskell$47$tests$47$gradual$47$pos$47$GHCList$47$Round1$47$ScanrMono.hs$34$$32$$40$line$32$11$44$$32$column$32$83$41$ 1))) true)))
(check-sat)
; SMT Says: Unsat
(pop 1)
(push 1)
(assert (not (=> (and (= 0 1)) true)))
(check-sat)
; SMT Says: Unsat
(pop 1)
(push 1)
(assert (not (=> (and (<= lq_karg$36$o$35$$35$$34$$47$Users$47$niki$47$liquidtypes$47$currentLH$47$liquidhaskell$47$tests$47$gradual$47$pos$47$GHCList$47$Round1$47$ScanrMono.hs$34$$32$$40$line$32$11$44$$32$column$32$83$41$ lq_karg$36$i$35$$35$$34$$47$Users$47$niki$47$liquidtypes$47$currentLH$47$liquidhaskell$47$tests$47$gradual$47$pos$47$GHCList$47$Round1$47$ScanrMono.hs$34$$32$$40$line$32$11$44$$32$column$32$83$41$)) true)))
(check-sat)
; SMT Says: Unsat
(pop 1)
(push 1)
(assert (not (=> (and (> lq_karg$36$o$35$$35$$34$$47$Users$47$niki$47$liquidtypes$47$currentLH$47$liquidhaskell$47$tests$47$gradual$47$pos$47$GHCList$47$Round1$47$ScanrMono.hs$34$$32$$40$line$32$11$44$$32$column$32$83$41$ lq_karg$36$i$35$$35$$34$$47$Users$47$niki$47$liquidtypes$47$currentLH$47$liquidhaskell$47$tests$47$gradual$47$pos$47$GHCList$47$Round1$47$ScanrMono.hs$34$$32$$40$line$32$11$44$$32$column$32$83$41$)) true)))
(check-sat)
; SMT Says: Unsat
(pop 1)
(push 1)
(assert (not (=> (and (>= lq_karg$36$o$35$$35$$34$$47$Users$47$niki$47$liquidtypes$47$currentLH$47$liquidhaskell$47$tests$47$gradual$47$pos$47$GHCList$47$Round1$47$ScanrMono.hs$34$$32$$40$line$32$11$44$$32$column$32$83$41$ lq_karg$36$i$35$$35$$34$$47$Users$47$niki$47$liquidtypes$47$currentLH$47$liquidhaskell$47$tests$47$gradual$47$pos$47$GHCList$47$Round1$47$ScanrMono.hs$34$$32$$40$line$32$11$44$$32$column$32$83$41$)) true)))
(check-sat)
; SMT Says: Unsat
(pop 1)
(push 1)
(assert (not (exists ((lq_karg$36$o$35$$35$$34$$47$Users$47$niki$47$liquidtypes$47$currentLH$47$liquidhaskell$47$tests$47$gradual$47$pos$47$GHCList$47$Round1$47$ScanrMono.hs$34$$32$$40$line$32$11$44$$32$column$32$83$41$ Int)) true)))
(check-sat)
; SMT Says: Unsat
(pop 1)
(push 1)
(assert (not (exists ((lq_karg$36$o$35$$35$$34$$47$Users$47$niki$47$liquidtypes$47$currentLH$47$liquidhaskell$47$tests$47$gradual$47$pos$47$GHCList$47$Round1$47$ScanrMono.hs$34$$32$$40$line$32$11$44$$32$column$32$83$41$ Int)) (and (= lq_karg$36$o$35$$35$$34$$47$Users$47$niki$47$liquidtypes$47$currentLH$47$liquidhaskell$47$tests$47$gradual$47$pos$47$GHCList$47$Round1$47$ScanrMono.hs$34$$32$$40$line$32$11$44$$32$column$32$83$41$ lq_karg$36$i$35$$35$$34$$47$Users$47$niki$47$liquidtypes$47$currentLH$47$liquidhaskell$47$tests$47$gradual$47$pos$47$GHCList$47$Round1$47$ScanrMono.hs$34$$32$$40$line$32$11$44$$32$column$32$83$41$)))))
(check-sat)
; SMT Says: Unsat
(pop 1)
(push 1)
(assert (not (exists ((len$32$o Int)) (exists ((lq_karg$36$o$35$$35$$34$$47$Users$47$niki$47$liquidtypes$47$currentLH$47$liquidhaskell$47$tests$47$gradual$47$pos$47$GHCList$47$Round1$47$ScanrMono.hs$34$$32$$40$line$32$11$44$$32$column$32$83$41$ Int)) (and (= len$32$o (+ 1 (apply$35$$35$0 (as len Int) lq_karg$36$i$35$$35$$34$$47$Users$47$niki$47$liquidtypes$47$currentLH$47$liquidhaskell$47$tests$47$gradual$47$pos$47$GHCList$47$Round1$47$ScanrMono.hs$34$$32$$40$line$32$11$44$$32$column$32$83$41$))))))))
(check-sat)
; SMT Says: Unsat
(pop 1)
(push 1)
(assert (not (exists ((tail$32$o Int)) (exists ((lq_karg$36$o$35$$35$$34$$47$Users$47$niki$47$liquidtypes$47$currentLH$47$liquidhaskell$47$tests$47$gradual$47$pos$47$GHCList$47$Round1$47$ScanrMono.hs$34$$32$$40$line$32$11$44$$32$column$32$83$41$ Int)) (and (= tail$32$o lq_karg$36$i$35$$35$$34$$47$Users$47$niki$47$liquidtypes$47$currentLH$47$liquidhaskell$47$tests$47$gradual$47$pos$47$GHCList$47$Round1$47$ScanrMono.hs$34$$32$$40$line$32$11$44$$32$column$32$83$41$))))))
(check-sat)
; SMT Says: Unsat
(pop 1)
(push 1)
(assert (not (exists ((head$32$o Int)) (exists ((lq_karg$36$o$35$$35$$34$$47$Users$47$niki$47$liquidtypes$47$currentLH$47$liquidhaskell$47$tests$47$gradual$47$pos$47$GHCList$47$Round1$47$ScanrMono.hs$34$$32$$40$line$32$11$44$$32$column$32$83$41$ Int)) (and (= head$32$o lq_karg$36$lq_tmp$36$db$35$$35$4$35$$35$$34$$47$Users$47$niki$47$liquidtypes$47$currentLH$47$liquidhaskell$47$tests$47$gradual$47$pos$47$GHCList$47$Round1$47$ScanrMono.hs$34$$32$$40$line$32$11$44$$32$column$32$83$41$))))))
(check-sat)
; SMT Says: Unsat
(pop 1)
(push 1)
(assert (not (exists ((len$32$o Int)) (exists ((lq_karg$36$o$35$$35$$34$$47$Users$47$niki$47$liquidtypes$47$currentLH$47$liquidhaskell$47$tests$47$gradual$47$pos$47$GHCList$47$Round1$47$ScanrMono.hs$34$$32$$40$line$32$11$44$$32$column$32$83$41$ Int)) (and (= len$32$o 0))))))
(check-sat)
; SMT Says: Unsat
(pop 1)
(push 1)
(assert (not (exists ((len$32$o Int)) (exists ((lq_karg$36$o$35$$35$$34$$47$Users$47$niki$47$liquidtypes$47$currentLH$47$liquidhaskell$47$tests$47$gradual$47$pos$47$GHCList$47$Round1$47$ScanrMono.hs$34$$32$$40$line$32$11$44$$32$column$32$83$41$ Int)) (and (>= len$32$o 0))))))
(check-sat)
; SMT Says: Unsat
(pop 1)
(push 1)
(assert (not (exists ((len$32$o Int)) (exists ((lq_karg$36$o$35$$35$$34$$47$Users$47$niki$47$liquidtypes$47$currentLH$47$liquidhaskell$47$tests$47$gradual$47$pos$47$GHCList$47$Round1$47$ScanrMono.hs$34$$32$$40$line$32$11$44$$32$column$32$83$41$ Int)) (and (> len$32$o 0))))))
(check-sat)
; SMT Says: Unsat
(pop 1)
(push 1)
(assert (not (exists ((len$32$i Int)) (exists ((lq_karg$36$o$35$$35$$34$$47$Users$47$niki$47$liquidtypes$47$currentLH$47$liquidhaskell$47$tests$47$gradual$47$pos$47$GHCList$47$Round1$47$ScanrMono.hs$34$$32$$40$line$32$11$44$$32$column$32$83$41$ Int)) (and (= len$32$o len$32$i))))))
(check-sat)
; SMT Says: Unsat
(pop 1)
(push 1)
(assert (not (exists ((len$32$i Int)) (exists ((lq_karg$36$o$35$$35$$34$$47$Users$47$niki$47$liquidtypes$47$currentLH$47$liquidhaskell$47$tests$47$gradual$47$pos$47$GHCList$47$Round1$47$ScanrMono.hs$34$$32$$40$line$32$11$44$$32$column$32$83$41$ Int)) (and (>= len$32$o len$32$i))))))
(check-sat)
; SMT Says: Unsat
(pop 1)
(push 1)
(assert (not (exists ((len$32$i Int)) (exists ((lq_karg$36$o$35$$35$$34$$47$Users$47$niki$47$liquidtypes$47$currentLH$47$liquidhaskell$47$tests$47$gradual$47$pos$47$GHCList$47$Round1$47$ScanrMono.hs$34$$32$$40$line$32$11$44$$32$column$32$83$41$ Int)) (and (> len$32$o len$32$i))))))
(check-sat)
; SMT Says: Unsat
(pop 1)
(push 1)
(assert (not (exists ((len$32$i Int)) (exists ((lq_karg$36$o$35$$35$$34$$47$Users$47$niki$47$liquidtypes$47$currentLH$47$liquidhaskell$47$tests$47$gradual$47$pos$47$GHCList$47$Round1$47$ScanrMono.hs$34$$32$$40$line$32$11$44$$32$column$32$83$41$ Int)) (and (<= len$32$o len$32$i))))))
(check-sat)
; SMT Says: Unsat
(pop 1)
(push 1)
(assert (not (exists ((len$32$i Int)) (exists ((lq_karg$36$o$35$$35$$34$$47$Users$47$niki$47$liquidtypes$47$currentLH$47$liquidhaskell$47$tests$47$gradual$47$pos$47$GHCList$47$Round1$47$ScanrMono.hs$34$$32$$40$line$32$11$44$$32$column$32$83$41$ Int)) (and (< len$32$o len$32$i))))))
(check-sat)
; SMT Says: Unsat
(pop 1)
(push 1)
(assert (not (exists ((len$32$o Int)) (exists ((lq_karg$36$o$35$$35$$34$$47$Users$47$niki$47$liquidtypes$47$currentLH$47$liquidhaskell$47$tests$47$gradual$47$pos$47$GHCList$47$Round1$47$ScanrMono.hs$34$$32$$40$line$32$11$44$$32$column$32$83$41$ Int)) (and (= lq_karg$36$lq_tmp$36$db$35$$35$4$35$$35$$34$$47$Users$47$niki$47$liquidtypes$47$currentLH$47$liquidhaskell$47$tests$47$gradual$47$pos$47$GHCList$47$Round1$47$ScanrMono.hs$34$$32$$40$line$32$11$44$$32$column$32$83$41$ len$32$o))))))
(check-sat)
; SMT Says: Error "line 694 column 259: unknown constant len$32$o"
(pop 1)
(push 1)
(assert (not (exists ((len$32$o Int)) (exists ((lq_karg$36$o$35$$35$$34$$47$Users$47$niki$47$liquidtypes$47$currentLH$47$liquidhaskell$47$tests$47$gradual$47$pos$47$GHCList$47$Round1$47$ScanrMono.hs$34$$32$$40$line$32$11$44$$32$column$32$83$41$ Int)) (and (= len$32$o (+ lq_karg$36$lq_tmp$36$db$35$$35$4$35$$35$$34$$47$Users$47$niki$47$liquidtypes$47$currentLH$47$liquidhaskell$47$tests$47$gradual$47$pos$47$GHCList$47$Round1$47$ScanrMono.hs$34$$32$$40$line$32$11$44$$32$column$32$83$41$ 1)))))))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (exists ((len$32$o Int)) (exists ((lq_karg$36$o$35$$35$$34$$47$Users$47$niki$47$liquidtypes$47$currentLH$47$liquidhaskell$47$tests$47$gradual$47$pos$47$GHCList$47$Round1$47$ScanrMono.hs$34$$32$$40$line$32$11$44$$32$column$32$83$41$ Int)) (and (= len$32$o (- lq_karg$36$lq_tmp$36$db$35$$35$4$35$$35$$34$$47$Users$47$niki$47$liquidtypes$47$currentLH$47$liquidhaskell$47$tests$47$gradual$47$pos$47$GHCList$47$Round1$47$ScanrMono.hs$34$$32$$40$line$32$11$44$$32$column$32$83$41$ 1)))))))
(check-sat)
; SMT Says: Error "line 698 column 260: unknown constant len$32$o"
(pop 1)
(push 1)
(assert (not (exists ((lq_karg$36$o$35$$35$$34$$47$Users$47$niki$47$liquidtypes$47$currentLH$47$liquidhaskell$47$tests$47$gradual$47$pos$47$GHCList$47$Round1$47$ScanrMono.hs$34$$32$$40$line$32$11$44$$32$column$32$83$41$ Int)) (and (= 0 1)))))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (exists ((lq_karg$36$o$35$$35$$34$$47$Users$47$niki$47$liquidtypes$47$currentLH$47$liquidhaskell$47$tests$47$gradual$47$pos$47$GHCList$47$Round1$47$ScanrMono.hs$34$$32$$40$line$32$11$44$$32$column$32$83$41$ Int)) (and (< lq_karg$36$o$35$$35$$34$$47$Users$47$niki$47$liquidtypes$47$currentLH$47$liquidhaskell$47$tests$47$gradual$47$pos$47$GHCList$47$Round1$47$ScanrMono.hs$34$$32$$40$line$32$11$44$$32$column$32$83$41$ lq_karg$36$i$35$$35$$34$$47$Users$47$niki$47$liquidtypes$47$currentLH$47$liquidhaskell$47$tests$47$gradual$47$pos$47$GHCList$47$Round1$47$ScanrMono.hs$34$$32$$40$line$32$11$44$$32$column$32$83$41$)))))
(check-sat)
; SMT Says: Error "line 702 column 259: unknown constant len$32$o"
(pop 1)
(push 1)
(assert (not (exists ((lq_karg$36$o$35$$35$$34$$47$Users$47$niki$47$liquidtypes$47$currentLH$47$liquidhaskell$47$tests$47$gradual$47$pos$47$GHCList$47$Round1$47$ScanrMono.hs$34$$32$$40$line$32$11$44$$32$column$32$83$41$ Int)) (and (<= lq_karg$36$o$35$$35$$34$$47$Users$47$niki$47$liquidtypes$47$currentLH$47$liquidhaskell$47$tests$47$gradual$47$pos$47$GHCList$47$Round1$47$ScanrMono.hs$34$$32$$40$line$32$11$44$$32$column$32$83$41$ lq_karg$36$i$35$$35$$34$$47$Users$47$niki$47$liquidtypes$47$currentLH$47$liquidhaskell$47$tests$47$gradual$47$pos$47$GHCList$47$Round1$47$ScanrMono.hs$34$$32$$40$line$32$11$44$$32$column$32$83$41$)))))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (exists ((lq_karg$36$o$35$$35$$34$$47$Users$47$niki$47$liquidtypes$47$currentLH$47$liquidhaskell$47$tests$47$gradual$47$pos$47$GHCList$47$Round1$47$ScanrMono.hs$34$$32$$40$line$32$11$44$$32$column$32$83$41$ Int)) (and (> lq_karg$36$o$35$$35$$34$$47$Users$47$niki$47$liquidtypes$47$currentLH$47$liquidhaskell$47$tests$47$gradual$47$pos$47$GHCList$47$Round1$47$ScanrMono.hs$34$$32$$40$line$32$11$44$$32$column$32$83$41$ lq_karg$36$i$35$$35$$34$$47$Users$47$niki$47$liquidtypes$47$currentLH$47$liquidhaskell$47$tests$47$gradual$47$pos$47$GHCList$47$Round1$47$ScanrMono.hs$34$$32$$40$line$32$11$44$$32$column$32$83$41$)))))
(check-sat)
; SMT Says: Error "line 706 column 260: unknown constant len$32$o"
(pop 1)
(push 1)
(assert (not (exists ((lq_karg$36$o$35$$35$$34$$47$Users$47$niki$47$liquidtypes$47$currentLH$47$liquidhaskell$47$tests$47$gradual$47$pos$47$GHCList$47$Round1$47$ScanrMono.hs$34$$32$$40$line$32$11$44$$32$column$32$83$41$ Int)) (and (>= lq_karg$36$o$35$$35$$34$$47$Users$47$niki$47$liquidtypes$47$currentLH$47$liquidhaskell$47$tests$47$gradual$47$pos$47$GHCList$47$Round1$47$ScanrMono.hs$34$$32$$40$line$32$11$44$$32$column$32$83$41$ lq_karg$36$i$35$$35$$34$$47$Users$47$niki$47$liquidtypes$47$currentLH$47$liquidhaskell$47$tests$47$gradual$47$pos$47$GHCList$47$Round1$47$ScanrMono.hs$34$$32$$40$line$32$11$44$$32$column$32$83$41$)))))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (exists ((lq_karg$36$o$35$$35$$34$$47$Users$47$niki$47$liquidtypes$47$currentLH$47$liquidhaskell$47$tests$47$gradual$47$pos$47$GHCList$47$Round1$47$ScanrMono.hs$34$$32$$40$line$32$11$44$$32$column$32$83$41$ Int)) (and (not (= lq_karg$36$o$35$$35$$34$$47$Users$47$niki$47$liquidtypes$47$currentLH$47$liquidhaskell$47$tests$47$gradual$47$pos$47$GHCList$47$Round1$47$ScanrMono.hs$34$$32$$40$line$32$11$44$$32$column$32$83$41$ lq_karg$36$i$35$$35$$34$$47$Users$47$niki$47$liquidtypes$47$currentLH$47$liquidhaskell$47$tests$47$gradual$47$pos$47$GHCList$47$Round1$47$ScanrMono.hs$34$$32$$40$line$32$11$44$$32$column$32$83$41$))))))
(check-sat)
; SMT Says: Error "line 710 column 259: unknown constant len$32$o"
(pop 1)
(push 1)
(assert (not (=> true true)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (=> (and (= lq_karg$36$o$35$$35$$34$$47$Users$47$niki$47$liquidtypes$47$currentLH$47$liquidhaskell$47$tests$47$gradual$47$pos$47$GHCList$47$Round1$47$ScanrMono.hs$34$$32$$40$line$32$11$44$$32$column$32$83$41$ lq_karg$36$i$35$$35$$34$$47$Users$47$niki$47$liquidtypes$47$currentLH$47$liquidhaskell$47$tests$47$gradual$47$pos$47$GHCList$47$Round1$47$ScanrMono.hs$34$$32$$40$line$32$11$44$$32$column$32$83$41$)) true)))
(check-sat)
; SMT Says: Unsat
(pop 1)
(push 1)
(assert (not (=> (and (= (apply$35$$35$0 (as len Int) lq_karg$36$o$35$$35$$34$$47$Users$47$niki$47$liquidtypes$47$currentLH$47$liquidhaskell$47$tests$47$gradual$47$pos$47$GHCList$47$Round1$47$ScanrMono.hs$34$$32$$40$line$32$11$44$$32$column$32$83$41$) (+ 1 (apply$35$$35$0 (as len Int) lq_karg$36$i$35$$35$$34$$47$Users$47$niki$47$liquidtypes$47$currentLH$47$liquidhaskell$47$tests$47$gradual$47$pos$47$GHCList$47$Round1$47$ScanrMono.hs$34$$32$$40$line$32$11$44$$32$column$32$83$41$)))) true)))
(check-sat)
; SMT Says: Unsat
(pop 1)
(push 1)
(assert (not (=> (and (= (apply$35$$35$0 (as tail Int) lq_karg$36$o$35$$35$$34$$47$Users$47$niki$47$liquidtypes$47$currentLH$47$liquidhaskell$47$tests$47$gradual$47$pos$47$GHCList$47$Round1$47$ScanrMono.hs$34$$32$$40$line$32$11$44$$32$column$32$83$41$) lq_karg$36$i$35$$35$$34$$47$Users$47$niki$47$liquidtypes$47$currentLH$47$liquidhaskell$47$tests$47$gradual$47$pos$47$GHCList$47$Round1$47$ScanrMono.hs$34$$32$$40$line$32$11$44$$32$column$32$83$41$)) true)))
(check-sat)
; SMT Says: Unsat
(pop 1)
(push 1)
(assert (not (=> (and (= (apply$35$$35$0 (as head Int) lq_karg$36$o$35$$35$$34$$47$Users$47$niki$47$liquidtypes$47$currentLH$47$liquidhaskell$47$tests$47$gradual$47$pos$47$GHCList$47$Round1$47$ScanrMono.hs$34$$32$$40$line$32$11$44$$32$column$32$83$41$) lq_karg$36$lq_tmp$36$db$35$$35$4$35$$35$$34$$47$Users$47$niki$47$liquidtypes$47$currentLH$47$liquidhaskell$47$tests$47$gradual$47$pos$47$GHCList$47$Round1$47$ScanrMono.hs$34$$32$$40$line$32$11$44$$32$column$32$83$41$)) true)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (=> (and (= (apply$35$$35$0 (as len Int) lq_karg$36$o$35$$35$$34$$47$Users$47$niki$47$liquidtypes$47$currentLH$47$liquidhaskell$47$tests$47$gradual$47$pos$47$GHCList$47$Round1$47$ScanrMono.hs$34$$32$$40$line$32$11$44$$32$column$32$83$41$) 0)) true)))
(check-sat)
; SMT Says: Unsat
(pop 1)
(push 1)
(assert (not (=> (and (>= (apply$35$$35$0 (as len Int) lq_karg$36$o$35$$35$$34$$47$Users$47$niki$47$liquidtypes$47$currentLH$47$liquidhaskell$47$tests$47$gradual$47$pos$47$GHCList$47$Round1$47$ScanrMono.hs$34$$32$$40$line$32$11$44$$32$column$32$83$41$) 0)) true)))
(check-sat)
; SMT Says: Unsat
(pop 1)
(push 1)
(assert (not (=> (and (> (apply$35$$35$0 (as len Int) lq_karg$36$o$35$$35$$34$$47$Users$47$niki$47$liquidtypes$47$currentLH$47$liquidhaskell$47$tests$47$gradual$47$pos$47$GHCList$47$Round1$47$ScanrMono.hs$34$$32$$40$line$32$11$44$$32$column$32$83$41$) 0)) true)))
(check-sat)
; SMT Says: Unsat
(pop 1)
(push 1)
(assert (not (=> (and (= (apply$35$$35$0 (as len Int) lq_karg$36$o$35$$35$$34$$47$Users$47$niki$47$liquidtypes$47$currentLH$47$liquidhaskell$47$tests$47$gradual$47$pos$47$GHCList$47$Round1$47$ScanrMono.hs$34$$32$$40$line$32$11$44$$32$column$32$83$41$) (apply$35$$35$0 (as len Int) lq_karg$36$i$35$$35$$34$$47$Users$47$niki$47$liquidtypes$47$currentLH$47$liquidhaskell$47$tests$47$gradual$47$pos$47$GHCList$47$Round1$47$ScanrMono.hs$34$$32$$40$line$32$11$44$$32$column$32$83$41$))) true)))
(check-sat)
; SMT Says: Unsat
(pop 1)
(push 1)
(assert (not (=> (and (>= (apply$35$$35$0 (as len Int) lq_karg$36$o$35$$35$$34$$47$Users$47$niki$47$liquidtypes$47$currentLH$47$liquidhaskell$47$tests$47$gradual$47$pos$47$GHCList$47$Round1$47$ScanrMono.hs$34$$32$$40$line$32$11$44$$32$column$32$83$41$) (apply$35$$35$0 (as len Int) lq_karg$36$i$35$$35$$34$$47$Users$47$niki$47$liquidtypes$47$currentLH$47$liquidhaskell$47$tests$47$gradual$47$pos$47$GHCList$47$Round1$47$ScanrMono.hs$34$$32$$40$line$32$11$44$$32$column$32$83$41$))) true)))
(check-sat)
; SMT Says: Unknown
(pop 1)
(push 1)
(assert (not (=> (and (> (apply$35$$35$0 (as len Int) lq_karg$36$o$35$$35$$34$$47$Users$47$niki$47$liquidtypes$47$currentLH$47$liquidhaskell$47$tests$47$gradual$47$pos$47$GHCList$47$Round1$47$ScanrMono.hs$34$$32$$40$line$32$11$44$$32$column$32$83$41$) (apply$35$$35$0 (as len Int) lq_karg$36$i$35$$35$$34$$47$Users$47$niki$47$liquidtypes$47$currentLH$47$liquidhaskell$47$tests$47$gradual$47$pos$47$GHCList$47$Round1$47$ScanrMono.hs$34$$32$$40$line$32$11$44$$32$column$32$83$41$))) true)))
(check-sat)
; SMT Says: Unsat
(pop 1)
(push 1)
(assert (not (=> (and (<= (apply$35$$35$0 (as len Int) lq_karg$36$o$35$$35$$34$$47$Users$47$niki$47$liquidtypes$47$currentLH$47$liquidhaskell$47$tests$47$gradual$47$pos$47$GHCList$47$Round1$47$ScanrMono.hs$34$$32$$40$line$32$11$44$$32$column$32$83$41$) (apply$35$$35$0 (as len Int) lq_karg$36$i$35$$35$$34$$47$Users$47$niki$47$liquidtypes$47$currentLH$47$liquidhaskell$47$tests$47$gradual$47$pos$47$GHCList$47$Round1$47$ScanrMono.hs$34$$32$$40$line$32$11$44$$32$column$32$83$41$))) true)))
(check-sat)
; SMT Says: Unsat
(pop 1)
(push 1)
(assert (not (=> (and (< (apply$35$$35$0 (as len Int) lq_karg$36$o$35$$35$$34$$47$Users$47$niki$47$liquidtypes$47$currentLH$47$liquidhaskell$47$tests$47$gradual$47$pos$47$GHCList$47$Round1$47$ScanrMono.hs$34$$32$$40$line$32$11$44$$32$column$32$83$41$) (apply$35$$35$0 (as len Int) lq_karg$36$i$35$$35$$34$$47$Users$47$niki$47$liquidtypes$47$currentLH$47$liquidhaskell$47$tests$47$gradual$47$pos$47$GHCList$47$Round1$47$ScanrMono.hs$34$$32$$40$line$32$11$44$$32$column$32$83$41$))) true)))
(check-sat)
; SMT Says: Unsat
(pop 1)
(push 1)
(assert (not (=> (and (= lq_karg$36$lq_tmp$36$db$35$$35$4$35$$35$$34$$47$Users$47$niki$47$liquidtypes$47$currentLH$47$liquidhaskell$47$tests$47$gradual$47$pos$47$GHCList$47$Round1$47$ScanrMono.hs$34$$32$$40$line$32$11$44$$32$column$32$83$41$ (apply$35$$35$0 (as len Int) lq_karg$36$o$35$$35$$34$$47$Users$47$niki$47$liquidtypes$47$currentLH$47$liquidhaskell$47$tests$47$gradual$47$pos$47$GHCList$47$Round1$47$ScanrMono.hs$34$$32$$40$line$32$11$44$$32$column$32$83$41$))) true)))
(check-sat)
; SMT Says: Unsat
(pop 1)
(push 1)
(assert (not (=> (and (= (apply$35$$35$0 (as len Int) lq_karg$36$o$35$$35$$34$$47$Users$47$niki$47$liquidtypes$47$currentLH$47$liquidhaskell$47$tests$47$gradual$47$pos$47$GHCList$47$Round1$47$ScanrMono.hs$34$$32$$40$line$32$11$44$$32$column$32$83$41$) (- lq_karg$36$lq_tmp$36$db$35$$35$4$35$$35$$34$$47$Users$47$niki$47$liquidtypes$47$currentLH$47$liquidhaskell$47$tests$47$gradual$47$pos$47$GHCList$47$Round1$47$ScanrMono.hs$34$$32$$40$line$32$11$44$$32$column$32$83$41$ 1))) true)))
(check-sat)
; SMT Says: Unsat
(pop 1)
(push 1)
(assert (not (=> (and (< lq_karg$36$o$35$$35$$34$$47$Users$47$niki$47$liquidtypes$47$currentLH$47$liquidhaskell$47$tests$47$gradual$47$pos$47$GHCList$47$Round1$47$ScanrMono.hs$34$$32$$40$line$32$11$44$$32$column$32$83$41$ lq_karg$36$i$35$$35$$34$$47$Users$47$niki$47$liquidtypes$47$currentLH$47$liquidhaskell$47$tests$47$gradual$47$pos$47$GHCList$47$Round1$47$ScanrMono.hs$34$$32$$40$line$32$11$44$$32$column$32$83$41$)) true)))
(check-sat)
; SMT Says: Unsat
(pop 1)
(push 1)
(assert (not (=> (and (> lq_karg$36$o$35$$35$$34$$47$Users$47$niki$47$liquidtypes$47$currentLH$47$liquidhaskell$47$tests$47$gradual$47$pos$47$GHCList$47$Round1$47$ScanrMono.hs$34$$32$$40$line$32$11$44$$32$column$32$83$41$ lq_karg$36$i$35$$35$$34$$47$Users$47$niki$47$liquidtypes$47$currentLH$47$liquidhaskell$47$tests$47$gradual$47$pos$47$GHCList$47$Round1$47$ScanrMono.hs$34$$32$$40$line$32$11$44$$32$column$32$83$41$)) true)))
(check-sat)
; SMT Says: Unsat
(pop 1)
(push 1)
(assert (not (=> (and (not (= lq_karg$36$o$35$$35$$34$$47$Users$47$niki$47$liquidtypes$47$currentLH$47$liquidhaskell$47$tests$47$gradual$47$pos$47$GHCList$47$Round1$47$ScanrMono.hs$34$$32$$40$line$32$11$44$$32$column$32$83$41$ lq_karg$36$i$35$$35$$34$$47$Users$47$niki$47$liquidtypes$47$currentLH$47$liquidhaskell$47$tests$47$gradual$47$pos$47$GHCList$47$Round1$47$ScanrMono.hs$34$$32$$40$line$32$11$44$$32$column$32$83$41$))) true)))
(check-sat)
; SMT Says: Unsat
(pop 1)
(push 1)
(assert (not (exists ((lq_karg$36$o$35$$35$$34$$47$Users$47$niki$47$liquidtypes$47$currentLH$47$liquidhaskell$47$tests$47$gradual$47$pos$47$GHCList$47$Round1$47$ScanrMono.hs$34$$32$$40$line$32$11$44$$32$column$32$83$41$ Int)) true)))
(check-sat)
; SMT Says: Unsat
(pop 1)
(push 1)
(assert (not (exists ((lq_karg$36$o$35$$35$$34$$47$Users$47$niki$47$liquidtypes$47$currentLH$47$liquidhaskell$47$tests$47$gradual$47$pos$47$GHCList$47$Round1$47$ScanrMono.hs$34$$32$$40$line$32$11$44$$32$column$32$83$41$ Int)) (and (= lq_karg$36$o$35$$35$$34$$47$Users$47$niki$47$liquidtypes$47$currentLH$47$liquidhaskell$47$tests$47$gradual$47$pos$47$GHCList$47$Round1$47$ScanrMono.hs$34$$32$$40$line$32$11$44$$32$column$32$83$41$ lq_karg$36$i$35$$35$$34$$47$Users$47$niki$47$liquidtypes$47$currentLH$47$liquidhaskell$47$tests$47$gradual$47$pos$47$GHCList$47$Round1$47$ScanrMono.hs$34$$32$$40$line$32$11$44$$32$column$32$83$41$)))))
(check-sat)
; SMT Says: Unsat
(pop 1)
(push 1)
(assert (not (exists ((len$32$o Int)) (exists ((lq_karg$36$o$35$$35$$34$$47$Users$47$niki$47$liquidtypes$47$currentLH$47$liquidhaskell$47$tests$47$gradual$47$pos$47$GHCList$47$Round1$47$ScanrMono.hs$34$$32$$40$line$32$11$44$$32$column$32$83$41$ Int)) (and (= len$32$o (+ 1 (apply$35$$35$0 (as len Int) lq_karg$36$i$35$$35$$34$$47$Users$47$niki$47$liquidtypes$47$currentLH$47$liquidhaskell$47$tests$47$gradual$47$pos$47$GHCList$47$Round1$47$ScanrMono.hs$34$$32$$40$line$32$11$44$$32$column$32$83$41$))))))))
(check-sat)
; SMT Says: Unsat
(pop 1)
(push 1)
(assert (not (exists ((tail$32$o Int)) (exists ((lq_karg$36$o$35$$35$$34$$47$Users$47$niki$47$liquidtypes$47$currentLH$47$liquidhaskell$47$tests$47$gradual$47$pos$47$GHCList$47$Round1$47$ScanrMono.hs$34$$32$$40$line$32$11$44$$32$column$32$83$41$ Int)) (and (= tail$32$o lq_karg$36$i$35$$35$$34$$47$Users$47$niki$47$liquidtypes$47$currentLH$47$liquidhaskell$47$tests$47$gradual$47$pos$47$GHCList$47$Round1$47$ScanrMono.hs$34$$32$$40$line$32$11$44$$32$column$32$83$41$))))))
(check-sat)
; SMT Says: Unsat
(pop 1)
(push 1)
(assert (not (exists ((head$32$o Int)) (exists ((lq_karg$36$o$35$$35$$34$$47$Users$47$niki$47$liquidtypes$47$currentLH$47$liquidhaskell$47$tests$47$gradual$47$pos$47$GHCList$47$Round1$47$ScanrMono.hs$34$$32$$40$line$32$11$44$$32$column$32$83$41$ Int)) (and (= head$32$o lq_karg$36$lq_tmp$36$db$35$$35$4$35$$35$$34$$47$Users$47$niki$47$liquidtypes$47$currentLH$47$liquidhaskell$47$tests$47$gradual$47$pos$47$GHCList$47$Round1$47$ScanrMono.hs$34$$32$$40$line$32$11$44$$32$column$32$83$41$))))))
(check-sat)
; SMT Says: Unsat
(pop 1)
(push 1)
(assert (not (exists ((len$32$o Int)) (exists ((lq_karg$36$o$35$$35$$34$$47$Users$47$niki$47$liquidtypes$47$currentLH$47$liquidhaskell$47$tests$47$gradual$47$pos$47$GHCList$47$Round1$47$ScanrMono.hs$34$$32$$40$line$32$11$44$$32$column$32$83$41$ Int)) (and (= len$32$o 0))))))
(check-sat)
; SMT Says: Unsat
(pop 1)
(push 1)
(assert (not (exists ((len$32$o Int)) (exists ((lq_karg$36$o$35$$35$$34$$47$Users$47$niki$47$liquidtypes$47$currentLH$47$liquidhaskell$47$tests$47$gradual$47$pos$47$GHCList$47$Round1$47$ScanrMono.hs$34$$32$$40$line$32$11$44$$32$column$32$83$41$ Int)) (and (>= len$32$o 0))))))
(check-sat)
; SMT Says: Unsat
(pop 1)
(push 1)
(assert (not (exists ((len$32$o Int)) (exists ((lq_karg$36$o$35$$35$$34$$47$Users$47$niki$47$liquidtypes$47$currentLH$47$liquidhaskell$47$tests$47$gradual$47$pos$47$GHCList$47$Round1$47$ScanrMono.hs$34$$32$$40$line$32$11$44$$32$column$32$83$41$ Int)) (and (> len$32$o 0))))))
(check-sat)
; SMT Says: Unsat
(pop 1)
(push 1)
(assert (not (exists ((len$32$i Int)) (exists ((lq_karg$36$o$35$$35$$34$$47$Users$47$niki$47$liquidtypes$47$currentLH$47$liquidhaskell$47$tests$47$gradual$47$pos$47$GHCList$47$Round1$47$ScanrMono.hs$34$$32$$40$line$32$11$44$$32$column$32$83$41$ Int)) (and (= len$32$o len$32$i))))))
(check-sat)
; SMT Says: Unsat
(pop 1)
(push 1)
(assert (not (exists ((len$32$i Int)) (exists ((lq_karg$36$o$35$$35$$34$$47$Users$47$niki$47$liquidtypes$47$currentLH$47$liquidhaskell$47$tests$47$gradual$47$pos$47$GHCList$47$Round1$47$ScanrMono.hs$34$$32$$40$line$32$11$44$$32$column$32$83$41$ Int)) (and (>= len$32$o len$32$i))))))
(check-sat)
; SMT Says: Unsat
(pop 1)
(push 1)
(assert (not (exists ((len$32$i Int)) (exists ((lq_karg$36$o$35$$35$$34$$47$Users$47$niki$47$liquidtypes$47$currentLH$47$liquidhaskell$47$tests$47$gradual$47$pos$47$GHCList$47$Round1$47$ScanrMono.hs$34$$32$$40$line$32$11$44$$32$column$32$83$41$ Int)) (and (> len$32$o len$32$i))))))
(check-sat)
; SMT Says: Unsat
(pop 1)
(push 1)
(assert (not (exists ((len$32$i Int)) (exists ((lq_karg$36$o$35$$35$$34$$47$Users$47$niki$47$liquidtypes$47$currentLH$47$liquidhaskell$47$tests$47$gradual$47$pos$47$GHCList$47$Round1$47$ScanrMono.hs$34$$32$$40$line$32$11$44$$32$column$32$83$41$ Int)) (and (<= len$32$o len$32$i))))))
(check-sat)
; SMT Says: Unsat
(pop 1)
(push 1)
(assert (not (exists ((len$32$i Int)) (exists ((lq_karg$36$o$35$$35$$34$$47$Users$47$niki$47$liquidtypes$47$currentLH$47$liquidhaskell$47$tests$47$gradual$47$pos$47$GHCList$47$Round1$47$ScanrMono.hs$34$$32$$40$line$32$11$44$$32$column$32$83$41$ Int)) (and (< len$32$o len$32$i))))))
(check-sat)
; SMT Says: Unsat
(pop 1)
(push 1)
(assert (not (exists ((len$32$o Int)) (exists ((lq_karg$36$o$35$$35$$34$$47$Users$47$niki$47$liquidtypes$47$currentLH$47$liquidhaskell$47$tests$47$gradual$47$pos$47$GHCList$47$Round1$47$ScanrMono.hs$34$$32$$40$line$32$11$44$$32$column$32$83$41$ Int)) (and (= lq_karg$36$lq_tmp$36$db$35$$35$4$35$$35$$34$$47$Users$47$niki$47$liquidtypes$47$currentLH$47$liquidhaskell$47$tests$47$gradual$47$pos$47$GHCList$47$Round1$47$ScanrMono.hs$34$$32$$40$line$32$11$44$$32$column$32$83$41$ len$32$o))))))
(check-sat)
; SMT Says: Unsat
(pop 1)
(push 1)
(assert (not (exists ((len$32$o Int)) (exists ((lq_karg$36$o$35$$35$$34$$47$Users$47$niki$47$liquidtypes$47$currentLH$47$liquidhaskell$47$tests$47$gradual$47$pos$47$GHCList$47$Round1$47$ScanrMono.hs$34$$32$$40$line$32$11$44$$32$column$32$83$41$ Int)) (and (= len$32$o (+ lq_karg$36$lq_tmp$36$db$35$$35$4$35$$35$$34$$47$Users$47$niki$47$liquidtypes$47$currentLH$47$liquidhaskell$47$tests$47$gradual$47$pos$47$GHCList$47$Round1$47$ScanrMono.hs$34$$32$$40$line$32$11$44$$32$column$32$83$41$ 1)))))))
(check-sat)
; SMT Says: Unsat
(pop 1)
(push 1)
(assert (not (exists ((len$32$o Int)) (exists ((lq_karg$36$o$35$$35$$34$$47$Users$47$niki$47$liquidtypes$47$currentLH$47$liquidhaskell$47$tests$47$gradual$47$pos$47$GHCList$47$Round1$47$ScanrMono.hs$34$$32$$40$line$32$11$44$$32$column$32$83$41$ Int)) (and (= len$32$o (- lq_karg$36$lq_tmp$36$db$35$$35$4$35$$35$$34$$47$Users$47$niki$47$liquidtypes$47$currentLH$47$liquidhaskell$47$tests$47$gradual$47$pos$47$GHCList$47$Round1$47$ScanrMono.hs$34$$32$$40$line$32$11$44$$32$column$32$83$41$ 1)))))))
(check-sat)
; SMT Says: Unsat
(pop 1)
(push 1)
(assert (not (exists ((lq_karg$36$o$35$$35$$34$$47$Users$47$niki$47$liquidtypes$47$currentLH$47$liquidhaskell$47$tests$47$gradual$47$pos$47$GHCList$47$Round1$47$ScanrMono.hs$34$$32$$40$line$32$11$44$$32$column$32$83$41$ Int)) (and (= 0 1)))))
(check-sat)
; SMT Says: Unsat
(pop 1)
(push 1)
(assert (not (exists ((lq_karg$36$o$35$$35$$34$$47$Users$47$niki$47$liquidtypes$47$currentLH$47$liquidhaskell$47$tests$47$gradual$47$pos$47$GHCList$47$Round1$47$ScanrMono.hs$34$$32$$40$line$32$11$44$$32$column$32$83$41$ Int)) (and (< lq_karg$36$o$35$$35$$34$$47$Users$47$niki$47$liquidtypes$47$currentLH$47$liquidhaskell$47$tests$47$gradual$47$pos$47$GHCList$47$Round1$47$ScanrMono.hs$34$$32$$40$line$32$11$44$$32$column$32$83$41$ lq_karg$36$i$35$$35$$34$$47$Users$47$niki$47$liquidtypes$47$currentLH$47$liquidhaskell$47$tests$47$gradual$47$pos$47$GHCList$47$Round1$47$ScanrMono.hs$34$$32$$40$line$32$11$44$$32$column$32$83$41$)))))
(check-sat)
; SMT Says: Unsat
(pop 1)
(push 1)
(assert (not (exists ((lq_karg$36$o$35$$35$$34$$47$Users$47$niki$47$liquidtypes$47$currentLH$47$liquidhaskell$47$tests$47$gradual$47$pos$47$GHCList$47$Round1$47$ScanrMono.hs$34$$32$$40$line$32$11$44$$32$column$32$83$41$ Int)) (and (<= lq_karg$36$o$35$$35$$34$$47$Users$47$niki$47$liquidtypes$47$currentLH$47$liquidhaskell$47$tests$47$gradual$47$pos$47$GHCList$47$Round1$47$ScanrMono.hs$34$$32$$40$line$32$11$44$$32$column$32$83$41$ lq_karg$36$i$35$$35$$34$$47$Users$47$niki$47$liquidtypes$47$currentLH$47$liquidhaskell$47$tests$47$gradual$47$pos$47$GHCList$47$Round1$47$ScanrMono.hs$34$$32$$40$line$32$11$44$$32$column$32$83$41$)))))
(check-sat)
; SMT Says: Error "line 854 column 259: unknown constant len$32$o"
(pop 1)
(push 1)
(assert (not (exists ((lq_karg$36$o$35$$35$$34$$47$Users$47$niki$47$liquidtypes$47$currentLH$47$liquidhaskell$47$tests$47$gradual$47$pos$47$GHCList$47$Round1$47$ScanrMono.hs$34$$32$$40$line$32$11$44$$32$column$32$83$41$ Int)) (and (> lq_karg$36$o$35$$35$$34$$47$Users$47$niki$47$liquidtypes$47$currentLH$47$liquidhaskell$47$tests$47$gradual$47$pos$47$GHCList$47$Round1$47$ScanrMono.hs$34$$32$$40$line$32$11$44$$32$column$32$83$41$ lq_karg$36$i$35$$35$$34$$47$Users$47$niki$47$liquidtypes$47$currentLH$47$liquidhaskell$47$tests$47$gradual$47$pos$47$GHCList$47$Round1$47$ScanrMono.hs$34$$32$$40$line$32$11$44$$32$column$32$83$41$)))))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (exists ((lq_karg$36$o$35$$35$$34$$47$Users$47$niki$47$liquidtypes$47$currentLH$47$liquidhaskell$47$tests$47$gradual$47$pos$47$GHCList$47$Round1$47$ScanrMono.hs$34$$32$$40$line$32$11$44$$32$column$32$83$41$ Int)) (and (>= lq_karg$36$o$35$$35$$34$$47$Users$47$niki$47$liquidtypes$47$currentLH$47$liquidhaskell$47$tests$47$gradual$47$pos$47$GHCList$47$Round1$47$ScanrMono.hs$34$$32$$40$line$32$11$44$$32$column$32$83$41$ lq_karg$36$i$35$$35$$34$$47$Users$47$niki$47$liquidtypes$47$currentLH$47$liquidhaskell$47$tests$47$gradual$47$pos$47$GHCList$47$Round1$47$ScanrMono.hs$34$$32$$40$line$32$11$44$$32$column$32$83$41$)))))
(check-sat)
; SMT Says: Error "line 858 column 260: unknown constant len$32$o"
(pop 1)
(push 1)
(assert (not (exists ((lq_karg$36$o$35$$35$$34$$47$Users$47$niki$47$liquidtypes$47$currentLH$47$liquidhaskell$47$tests$47$gradual$47$pos$47$GHCList$47$Round1$47$ScanrMono.hs$34$$32$$40$line$32$11$44$$32$column$32$83$41$ Int)) (and (not (= lq_karg$36$o$35$$35$$34$$47$Users$47$niki$47$liquidtypes$47$currentLH$47$liquidhaskell$47$tests$47$gradual$47$pos$47$GHCList$47$Round1$47$ScanrMono.hs$34$$32$$40$line$32$11$44$$32$column$32$83$41$ lq_karg$36$i$35$$35$$34$$47$Users$47$niki$47$liquidtypes$47$currentLH$47$liquidhaskell$47$tests$47$gradual$47$pos$47$GHCList$47$Round1$47$ScanrMono.hs$34$$32$$40$line$32$11$44$$32$column$32$83$41$))))))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (=> true true)))
(check-sat)
; SMT Says: Error "line 862 column 259: unknown constant len$32$o"
(pop 1)
(push 1)
(assert (not (=> (and (= lq_karg$36$o$35$$35$$34$$47$Users$47$niki$47$liquidtypes$47$currentLH$47$liquidhaskell$47$tests$47$gradual$47$pos$47$GHCList$47$Round1$47$ScanrMono.hs$34$$32$$40$line$32$11$44$$32$column$32$83$41$ lq_karg$36$i$35$$35$$34$$47$Users$47$niki$47$liquidtypes$47$currentLH$47$liquidhaskell$47$tests$47$gradual$47$pos$47$GHCList$47$Round1$47$ScanrMono.hs$34$$32$$40$line$32$11$44$$32$column$32$83$41$)) true)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (=> (and (= (apply$35$$35$0 (as len Int) lq_karg$36$o$35$$35$$34$$47$Users$47$niki$47$liquidtypes$47$currentLH$47$liquidhaskell$47$tests$47$gradual$47$pos$47$GHCList$47$Round1$47$ScanrMono.hs$34$$32$$40$line$32$11$44$$32$column$32$83$41$) (+ 1 (apply$35$$35$0 (as len Int) lq_karg$36$i$35$$35$$34$$47$Users$47$niki$47$liquidtypes$47$currentLH$47$liquidhaskell$47$tests$47$gradual$47$pos$47$GHCList$47$Round1$47$ScanrMono.hs$34$$32$$40$line$32$11$44$$32$column$32$83$41$)))) true)))
(check-sat)
; SMT Says: Error "line 866 column 260: unknown constant len$32$o"
(pop 1)
(push 1)
(assert (not (=> (and (= (apply$35$$35$0 (as tail Int) lq_karg$36$o$35$$35$$34$$47$Users$47$niki$47$liquidtypes$47$currentLH$47$liquidhaskell$47$tests$47$gradual$47$pos$47$GHCList$47$Round1$47$ScanrMono.hs$34$$32$$40$line$32$11$44$$32$column$32$83$41$) lq_karg$36$i$35$$35$$34$$47$Users$47$niki$47$liquidtypes$47$currentLH$47$liquidhaskell$47$tests$47$gradual$47$pos$47$GHCList$47$Round1$47$ScanrMono.hs$34$$32$$40$line$32$11$44$$32$column$32$83$41$)) true)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (=> (and (= (apply$35$$35$0 (as head Int) lq_karg$36$o$35$$35$$34$$47$Users$47$niki$47$liquidtypes$47$currentLH$47$liquidhaskell$47$tests$47$gradual$47$pos$47$GHCList$47$Round1$47$ScanrMono.hs$34$$32$$40$line$32$11$44$$32$column$32$83$41$) lq_karg$36$lq_tmp$36$db$35$$35$4$35$$35$$34$$47$Users$47$niki$47$liquidtypes$47$currentLH$47$liquidhaskell$47$tests$47$gradual$47$pos$47$GHCList$47$Round1$47$ScanrMono.hs$34$$32$$40$line$32$11$44$$32$column$32$83$41$)) true)))
(check-sat)
; SMT Says: Error "line 870 column 259: unknown constant len$32$o"
(pop 1)
(push 1)
(assert (not (=> (and (= (apply$35$$35$0 (as len Int) lq_karg$36$o$35$$35$$34$$47$Users$47$niki$47$liquidtypes$47$currentLH$47$liquidhaskell$47$tests$47$gradual$47$pos$47$GHCList$47$Round1$47$ScanrMono.hs$34$$32$$40$line$32$11$44$$32$column$32$83$41$) 0)) true)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (=> (and (>= (apply$35$$35$0 (as len Int) lq_karg$36$o$35$$35$$34$$47$Users$47$niki$47$liquidtypes$47$currentLH$47$liquidhaskell$47$tests$47$gradual$47$pos$47$GHCList$47$Round1$47$ScanrMono.hs$34$$32$$40$line$32$11$44$$32$column$32$83$41$) 0)) true)))
(check-sat)
; SMT Says: Unsat
(pop 1)
(push 1)
(assert (not (=> (and (> (apply$35$$35$0 (as len Int) lq_karg$36$o$35$$35$$34$$47$Users$47$niki$47$liquidtypes$47$currentLH$47$liquidhaskell$47$tests$47$gradual$47$pos$47$GHCList$47$Round1$47$ScanrMono.hs$34$$32$$40$line$32$11$44$$32$column$32$83$41$) 0)) true)))
(check-sat)
; SMT Says: Unsat
(pop 1)
(push 1)
(assert (not (=> (and (= (apply$35$$35$0 (as len Int) lq_karg$36$o$35$$35$$34$$47$Users$47$niki$47$liquidtypes$47$currentLH$47$liquidhaskell$47$tests$47$gradual$47$pos$47$GHCList$47$Round1$47$ScanrMono.hs$34$$32$$40$line$32$11$44$$32$column$32$83$41$) (apply$35$$35$0 (as len Int) lq_karg$36$i$35$$35$$34$$47$Users$47$niki$47$liquidtypes$47$currentLH$47$liquidhaskell$47$tests$47$gradual$47$pos$47$GHCList$47$Round1$47$ScanrMono.hs$34$$32$$40$line$32$11$44$$32$column$32$83$41$))) true)))
(check-sat)
; SMT Says: Unsat
(pop 1)
(push 1)
(assert (not (=> (and (>= (apply$35$$35$0 (as len Int) lq_karg$36$o$35$$35$$34$$47$Users$47$niki$47$liquidtypes$47$currentLH$47$liquidhaskell$47$tests$47$gradual$47$pos$47$GHCList$47$Round1$47$ScanrMono.hs$34$$32$$40$line$32$11$44$$32$column$32$83$41$) (apply$35$$35$0 (as len Int) lq_karg$36$i$35$$35$$34$$47$Users$47$niki$47$liquidtypes$47$currentLH$47$liquidhaskell$47$tests$47$gradual$47$pos$47$GHCList$47$Round1$47$ScanrMono.hs$34$$32$$40$line$32$11$44$$32$column$32$83$41$))) true)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (=> (and (> (apply$35$$35$0 (as len Int) lq_karg$36$o$35$$35$$34$$47$Users$47$niki$47$liquidtypes$47$currentLH$47$liquidhaskell$47$tests$47$gradual$47$pos$47$GHCList$47$Round1$47$ScanrMono.hs$34$$32$$40$line$32$11$44$$32$column$32$83$41$) (apply$35$$35$0 (as len Int) lq_karg$36$i$35$$35$$34$$47$Users$47$niki$47$liquidtypes$47$currentLH$47$liquidhaskell$47$tests$47$gradual$47$pos$47$GHCList$47$Round1$47$ScanrMono.hs$34$$32$$40$line$32$11$44$$32$column$32$83$41$))) true)))
(check-sat)
; SMT Says: Unsat
(pop 1)
(push 1)
(assert (not (=> (and (<= (apply$35$$35$0 (as len Int) lq_karg$36$o$35$$35$$34$$47$Users$47$niki$47$liquidtypes$47$currentLH$47$liquidhaskell$47$tests$47$gradual$47$pos$47$GHCList$47$Round1$47$ScanrMono.hs$34$$32$$40$line$32$11$44$$32$column$32$83$41$) (apply$35$$35$0 (as len Int) lq_karg$36$i$35$$35$$34$$47$Users$47$niki$47$liquidtypes$47$currentLH$47$liquidhaskell$47$tests$47$gradual$47$pos$47$GHCList$47$Round1$47$ScanrMono.hs$34$$32$$40$line$32$11$44$$32$column$32$83$41$))) true)))
(check-sat)
; SMT Says: Unsat
(pop 1)
(push 1)
(assert (not (=> (and (< (apply$35$$35$0 (as len Int) lq_karg$36$o$35$$35$$34$$47$Users$47$niki$47$liquidtypes$47$currentLH$47$liquidhaskell$47$tests$47$gradual$47$pos$47$GHCList$47$Round1$47$ScanrMono.hs$34$$32$$40$line$32$11$44$$32$column$32$83$41$) (apply$35$$35$0 (as len Int) lq_karg$36$i$35$$35$$34$$47$Users$47$niki$47$liquidtypes$47$currentLH$47$liquidhaskell$47$tests$47$gradual$47$pos$47$GHCList$47$Round1$47$ScanrMono.hs$34$$32$$40$line$32$11$44$$32$column$32$83$41$))) true)))
(check-sat)
; SMT Says: Unsat
(pop 1)
(push 1)
(assert (not (=> (and (= lq_karg$36$lq_tmp$36$db$35$$35$4$35$$35$$34$$47$Users$47$niki$47$liquidtypes$47$currentLH$47$liquidhaskell$47$tests$47$gradual$47$pos$47$GHCList$47$Round1$47$ScanrMono.hs$34$$32$$40$line$32$11$44$$32$column$32$83$41$ (apply$35$$35$0 (as len Int) lq_karg$36$o$35$$35$$34$$47$Users$47$niki$47$liquidtypes$47$currentLH$47$liquidhaskell$47$tests$47$gradual$47$pos$47$GHCList$47$Round1$47$ScanrMono.hs$34$$32$$40$line$32$11$44$$32$column$32$83$41$))) true)))
(check-sat)
; SMT Says: Unsat
(pop 1)
(push 1)
(assert (not (=> (and (= (apply$35$$35$0 (as len Int) lq_karg$36$o$35$$35$$34$$47$Users$47$niki$47$liquidtypes$47$currentLH$47$liquidhaskell$47$tests$47$gradual$47$pos$47$GHCList$47$Round1$47$ScanrMono.hs$34$$32$$40$line$32$11$44$$32$column$32$83$41$) (+ lq_karg$36$lq_tmp$36$db$35$$35$4$35$$35$$34$$47$Users$47$niki$47$liquidtypes$47$currentLH$47$liquidhaskell$47$tests$47$gradual$47$pos$47$GHCList$47$Round1$47$ScanrMono.hs$34$$32$$40$line$32$11$44$$32$column$32$83$41$ 1))) true)))
(check-sat)
; SMT Says: Unknown
(pop 1)
(push 1)
(assert (not (=> (and (= (apply$35$$35$0 (as len Int) lq_karg$36$o$35$$35$$34$$47$Users$47$niki$47$liquidtypes$47$currentLH$47$liquidhaskell$47$tests$47$gradual$47$pos$47$GHCList$47$Round1$47$ScanrMono.hs$34$$32$$40$line$32$11$44$$32$column$32$83$41$) (- lq_karg$36$lq_tmp$36$db$35$$35$4$35$$35$$34$$47$Users$47$niki$47$liquidtypes$47$currentLH$47$liquidhaskell$47$tests$47$gradual$47$pos$47$GHCList$47$Round1$47$ScanrMono.hs$34$$32$$40$line$32$11$44$$32$column$32$83$41$ 1))) true)))
(check-sat)
; SMT Says: Unsat
(pop 1)
(push 1)
(assert (not (=> (and (= 0 1)) true)))
(check-sat)
; SMT Says: Unsat
(pop 1)
(push 1)
(assert (not (=> (and (< lq_karg$36$o$35$$35$$34$$47$Users$47$niki$47$liquidtypes$47$currentLH$47$liquidhaskell$47$tests$47$gradual$47$pos$47$GHCList$47$Round1$47$ScanrMono.hs$34$$32$$40$line$32$11$44$$32$column$32$83$41$ lq_karg$36$i$35$$35$$34$$47$Users$47$niki$47$liquidtypes$47$currentLH$47$liquidhaskell$47$tests$47$gradual$47$pos$47$GHCList$47$Round1$47$ScanrMono.hs$34$$32$$40$line$32$11$44$$32$column$32$83$41$)) true)))
(check-sat)
; SMT Says: Unsat
(pop 1)
(push 1)
(assert (not (=> (and (<= lq_karg$36$o$35$$35$$34$$47$Users$47$niki$47$liquidtypes$47$currentLH$47$liquidhaskell$47$tests$47$gradual$47$pos$47$GHCList$47$Round1$47$ScanrMono.hs$34$$32$$40$line$32$11$44$$32$column$32$83$41$ lq_karg$36$i$35$$35$$34$$47$Users$47$niki$47$liquidtypes$47$currentLH$47$liquidhaskell$47$tests$47$gradual$47$pos$47$GHCList$47$Round1$47$ScanrMono.hs$34$$32$$40$line$32$11$44$$32$column$32$83$41$)) true)))
(check-sat)
; SMT Says: Unsat
(pop 1)
(push 1)
(assert (not (=> (and (>= lq_karg$36$o$35$$35$$34$$47$Users$47$niki$47$liquidtypes$47$currentLH$47$liquidhaskell$47$tests$47$gradual$47$pos$47$GHCList$47$Round1$47$ScanrMono.hs$34$$32$$40$line$32$11$44$$32$column$32$83$41$ lq_karg$36$i$35$$35$$34$$47$Users$47$niki$47$liquidtypes$47$currentLH$47$liquidhaskell$47$tests$47$gradual$47$pos$47$GHCList$47$Round1$47$ScanrMono.hs$34$$32$$40$line$32$11$44$$32$column$32$83$41$)) true)))
(check-sat)
; SMT Says: Unsat
(pop 1)
(push 1)
(assert (not (exists ((lq_karg$36$o$35$$35$$34$$47$Users$47$niki$47$liquidtypes$47$currentLH$47$liquidhaskell$47$tests$47$gradual$47$pos$47$GHCList$47$Round1$47$ScanrMono.hs$34$$32$$40$line$32$11$44$$32$column$32$83$41$ Int)) true)))
(check-sat)
; SMT Says: Unsat
(pop 1)
(push 1)
(assert (not (exists ((lq_karg$36$o$35$$35$$34$$47$Users$47$niki$47$liquidtypes$47$currentLH$47$liquidhaskell$47$tests$47$gradual$47$pos$47$GHCList$47$Round1$47$ScanrMono.hs$34$$32$$40$line$32$11$44$$32$column$32$83$41$ Int)) (and (= lq_karg$36$o$35$$35$$34$$47$Users$47$niki$47$liquidtypes$47$currentLH$47$liquidhaskell$47$tests$47$gradual$47$pos$47$GHCList$47$Round1$47$ScanrMono.hs$34$$32$$40$line$32$11$44$$32$column$32$83$41$ lq_karg$36$i$35$$35$$34$$47$Users$47$niki$47$liquidtypes$47$currentLH$47$liquidhaskell$47$tests$47$gradual$47$pos$47$GHCList$47$Round1$47$ScanrMono.hs$34$$32$$40$line$32$11$44$$32$column$32$83$41$)))))
(check-sat)
; SMT Says: Unsat
(pop 1)
(push 1)
(assert (not (exists ((len$32$o Int)) (exists ((lq_karg$36$o$35$$35$$34$$47$Users$47$niki$47$liquidtypes$47$currentLH$47$liquidhaskell$47$tests$47$gradual$47$pos$47$GHCList$47$Round1$47$ScanrMono.hs$34$$32$$40$line$32$11$44$$32$column$32$83$41$ Int)) (and (= len$32$o (+ 1 (apply$35$$35$0 (as len Int) lq_karg$36$i$35$$35$$34$$47$Users$47$niki$47$liquidtypes$47$currentLH$47$liquidhaskell$47$tests$47$gradual$47$pos$47$GHCList$47$Round1$47$ScanrMono.hs$34$$32$$40$line$32$11$44$$32$column$32$83$41$))))))))
(check-sat)
; SMT Says: Unsat
(pop 1)
(push 1)
(assert (not (exists ((tail$32$o Int)) (exists ((lq_karg$36$o$35$$35$$34$$47$Users$47$niki$47$liquidtypes$47$currentLH$47$liquidhaskell$47$tests$47$gradual$47$pos$47$GHCList$47$Round1$47$ScanrMono.hs$34$$32$$40$line$32$11$44$$32$column$32$83$41$ Int)) (and (= tail$32$o lq_karg$36$i$35$$35$$34$$47$Users$47$niki$47$liquidtypes$47$currentLH$47$liquidhaskell$47$tests$47$gradual$47$pos$47$GHCList$47$Round1$47$ScanrMono.hs$34$$32$$40$line$32$11$44$$32$column$32$83$41$))))))
(check-sat)
; SMT Says: Unsat
(pop 1)
(push 1)
(assert (not (exists ((head$32$o Int)) (exists ((lq_karg$36$o$35$$35$$34$$47$Users$47$niki$47$liquidtypes$47$currentLH$47$liquidhaskell$47$tests$47$gradual$47$pos$47$GHCList$47$Round1$47$ScanrMono.hs$34$$32$$40$line$32$11$44$$32$column$32$83$41$ Int)) (and (= head$32$o lq_karg$36$lq_tmp$36$db$35$$35$4$35$$35$$34$$47$Users$47$niki$47$liquidtypes$47$currentLH$47$liquidhaskell$47$tests$47$gradual$47$pos$47$GHCList$47$Round1$47$ScanrMono.hs$34$$32$$40$line$32$11$44$$32$column$32$83$41$))))))
(check-sat)
; SMT Says: Unsat
(pop 1)
(push 1)
(assert (not (exists ((len$32$o Int)) (exists ((lq_karg$36$o$35$$35$$34$$47$Users$47$niki$47$liquidtypes$47$currentLH$47$liquidhaskell$47$tests$47$gradual$47$pos$47$GHCList$47$Round1$47$ScanrMono.hs$34$$32$$40$line$32$11$44$$32$column$32$83$41$ Int)) (and (= len$32$o 0))))))
(check-sat)
; SMT Says: Unsat
(pop 1)
(push 1)
(assert (not (exists ((len$32$o Int)) (exists ((lq_karg$36$o$35$$35$$34$$47$Users$47$niki$47$liquidtypes$47$currentLH$47$liquidhaskell$47$tests$47$gradual$47$pos$47$GHCList$47$Round1$47$ScanrMono.hs$34$$32$$40$line$32$11$44$$32$column$32$83$41$ Int)) (and (>= len$32$o 0))))))
(check-sat)
; SMT Says: Unsat
(pop 1)
(push 1)
(assert (not (exists ((len$32$o Int)) (exists ((lq_karg$36$o$35$$35$$34$$47$Users$47$niki$47$liquidtypes$47$currentLH$47$liquidhaskell$47$tests$47$gradual$47$pos$47$GHCList$47$Round1$47$ScanrMono.hs$34$$32$$40$line$32$11$44$$32$column$32$83$41$ Int)) (and (> len$32$o 0))))))
(check-sat)
; SMT Says: Unsat
(pop 1)
(push 1)
(assert (not (exists ((len$32$i Int)) (exists ((lq_karg$36$o$35$$35$$34$$47$Users$47$niki$47$liquidtypes$47$currentLH$47$liquidhaskell$47$tests$47$gradual$47$pos$47$GHCList$47$Round1$47$ScanrMono.hs$34$$32$$40$line$32$11$44$$32$column$32$83$41$ Int)) (and (= len$32$o len$32$i))))))
(check-sat)
; SMT Says: Unsat
(pop 1)
(push 1)
(assert (not (exists ((len$32$i Int)) (exists ((lq_karg$36$o$35$$35$$34$$47$Users$47$niki$47$liquidtypes$47$currentLH$47$liquidhaskell$47$tests$47$gradual$47$pos$47$GHCList$47$Round1$47$ScanrMono.hs$34$$32$$40$line$32$11$44$$32$column$32$83$41$ Int)) (and (>= len$32$o len$32$i))))))
(check-sat)
; SMT Says: Unsat
(pop 1)
(push 1)
(assert (not (exists ((len$32$i Int)) (exists ((lq_karg$36$o$35$$35$$34$$47$Users$47$niki$47$liquidtypes$47$currentLH$47$liquidhaskell$47$tests$47$gradual$47$pos$47$GHCList$47$Round1$47$ScanrMono.hs$34$$32$$40$line$32$11$44$$32$column$32$83$41$ Int)) (and (> len$32$o len$32$i))))))
(check-sat)
; SMT Says: Unsat
(pop 1)
(push 1)
(assert (not (exists ((len$32$i Int)) (exists ((lq_karg$36$o$35$$35$$34$$47$Users$47$niki$47$liquidtypes$47$currentLH$47$liquidhaskell$47$tests$47$gradual$47$pos$47$GHCList$47$Round1$47$ScanrMono.hs$34$$32$$40$line$32$11$44$$32$column$32$83$41$ Int)) (and (<= len$32$o len$32$i))))))
(check-sat)
; SMT Says: Unsat
(pop 1)
(push 1)
(assert (not (exists ((len$32$i Int)) (exists ((lq_karg$36$o$35$$35$$34$$47$Users$47$niki$47$liquidtypes$47$currentLH$47$liquidhaskell$47$tests$47$gradual$47$pos$47$GHCList$47$Round1$47$ScanrMono.hs$34$$32$$40$line$32$11$44$$32$column$32$83$41$ Int)) (and (< len$32$o len$32$i))))))
(check-sat)
; SMT Says: Unsat
(pop 1)
(push 1)
(assert (not (exists ((len$32$o Int)) (exists ((lq_karg$36$o$35$$35$$34$$47$Users$47$niki$47$liquidtypes$47$currentLH$47$liquidhaskell$47$tests$47$gradual$47$pos$47$GHCList$47$Round1$47$ScanrMono.hs$34$$32$$40$line$32$11$44$$32$column$32$83$41$ Int)) (and (= lq_karg$36$lq_tmp$36$db$35$$35$4$35$$35$$34$$47$Users$47$niki$47$liquidtypes$47$currentLH$47$liquidhaskell$47$tests$47$gradual$47$pos$47$GHCList$47$Round1$47$ScanrMono.hs$34$$32$$40$line$32$11$44$$32$column$32$83$41$ len$32$o))))))
(check-sat)
; SMT Says: Unsat
(pop 1)
(push 1)
(assert (not (exists ((len$32$o Int)) (exists ((lq_karg$36$o$35$$35$$34$$47$Users$47$niki$47$liquidtypes$47$currentLH$47$liquidhaskell$47$tests$47$gradual$47$pos$47$GHCList$47$Round1$47$ScanrMono.hs$34$$32$$40$line$32$11$44$$32$column$32$83$41$ Int)) (and (= len$32$o (+ lq_karg$36$lq_tmp$36$db$35$$35$4$35$$35$$34$$47$Users$47$niki$47$liquidtypes$47$currentLH$47$liquidhaskell$47$tests$47$gradual$47$pos$47$GHCList$47$Round1$47$ScanrMono.hs$34$$32$$40$line$32$11$44$$32$column$32$83$41$ 1)))))))
(check-sat)
; SMT Says: Unsat
(pop 1)
(push 1)
(assert (not (exists ((len$32$o Int)) (exists ((lq_karg$36$o$35$$35$$34$$47$Users$47$niki$47$liquidtypes$47$currentLH$47$liquidhaskell$47$tests$47$gradual$47$pos$47$GHCList$47$Round1$47$ScanrMono.hs$34$$32$$40$line$32$11$44$$32$column$32$83$41$ Int)) (and (= len$32$o (- lq_karg$36$lq_tmp$36$db$35$$35$4$35$$35$$34$$47$Users$47$niki$47$liquidtypes$47$currentLH$47$liquidhaskell$47$tests$47$gradual$47$pos$47$GHCList$47$Round1$47$ScanrMono.hs$34$$32$$40$line$32$11$44$$32$column$32$83$41$ 1)))))))
(check-sat)
; SMT Says: Unsat
(pop 1)
(push 1)
(assert (not (exists ((lq_karg$36$o$35$$35$$34$$47$Users$47$niki$47$liquidtypes$47$currentLH$47$liquidhaskell$47$tests$47$gradual$47$pos$47$GHCList$47$Round1$47$ScanrMono.hs$34$$32$$40$line$32$11$44$$32$column$32$83$41$ Int)) (and (= 0 1)))))
(check-sat)
; SMT Says: Unsat
(pop 1)
(push 1)
(assert (not (exists ((lq_karg$36$o$35$$35$$34$$47$Users$47$niki$47$liquidtypes$47$currentLH$47$liquidhaskell$47$tests$47$gradual$47$pos$47$GHCList$47$Round1$47$ScanrMono.hs$34$$32$$40$line$32$11$44$$32$column$32$83$41$ Int)) (and (< lq_karg$36$o$35$$35$$34$$47$Users$47$niki$47$liquidtypes$47$currentLH$47$liquidhaskell$47$tests$47$gradual$47$pos$47$GHCList$47$Round1$47$ScanrMono.hs$34$$32$$40$line$32$11$44$$32$column$32$83$41$ lq_karg$36$i$35$$35$$34$$47$Users$47$niki$47$liquidtypes$47$currentLH$47$liquidhaskell$47$tests$47$gradual$47$pos$47$GHCList$47$Round1$47$ScanrMono.hs$34$$32$$40$line$32$11$44$$32$column$32$83$41$)))))
(check-sat)
; SMT Says: Unsat
(pop 1)
(push 1)
(assert (not (exists ((lq_karg$36$o$35$$35$$34$$47$Users$47$niki$47$liquidtypes$47$currentLH$47$liquidhaskell$47$tests$47$gradual$47$pos$47$GHCList$47$Round1$47$ScanrMono.hs$34$$32$$40$line$32$11$44$$32$column$32$83$41$ Int)) (and (<= lq_karg$36$o$35$$35$$34$$47$Users$47$niki$47$liquidtypes$47$currentLH$47$liquidhaskell$47$tests$47$gradual$47$pos$47$GHCList$47$Round1$47$ScanrMono.hs$34$$32$$40$line$32$11$44$$32$column$32$83$41$ lq_karg$36$i$35$$35$$34$$47$Users$47$niki$47$liquidtypes$47$currentLH$47$liquidhaskell$47$tests$47$gradual$47$pos$47$GHCList$47$Round1$47$ScanrMono.hs$34$$32$$40$line$32$11$44$$32$column$32$83$41$)))))
(check-sat)
; SMT Says: Unsat
(pop 1)
(push 1)
(assert (not (exists ((lq_karg$36$o$35$$35$$34$$47$Users$47$niki$47$liquidtypes$47$currentLH$47$liquidhaskell$47$tests$47$gradual$47$pos$47$GHCList$47$Round1$47$ScanrMono.hs$34$$32$$40$line$32$11$44$$32$column$32$83$41$ Int)) (and (> lq_karg$36$o$35$$35$$34$$47$Users$47$niki$47$liquidtypes$47$currentLH$47$liquidhaskell$47$tests$47$gradual$47$pos$47$GHCList$47$Round1$47$ScanrMono.hs$34$$32$$40$line$32$11$44$$32$column$32$83$41$ lq_karg$36$i$35$$35$$34$$47$Users$47$niki$47$liquidtypes$47$currentLH$47$liquidhaskell$47$tests$47$gradual$47$pos$47$GHCList$47$Round1$47$ScanrMono.hs$34$$32$$40$line$32$11$44$$32$column$32$83$41$)))))
(check-sat)
; SMT Says: Unsat
(pop 1)
(push 1)
(assert (not (exists ((lq_karg$36$o$35$$35$$34$$47$Users$47$niki$47$liquidtypes$47$currentLH$47$liquidhaskell$47$tests$47$gradual$47$pos$47$GHCList$47$Round1$47$ScanrMono.hs$34$$32$$40$line$32$11$44$$32$column$32$83$41$ Int)) (and (>= lq_karg$36$o$35$$35$$34$$47$Users$47$niki$47$liquidtypes$47$currentLH$47$liquidhaskell$47$tests$47$gradual$47$pos$47$GHCList$47$Round1$47$ScanrMono.hs$34$$32$$40$line$32$11$44$$32$column$32$83$41$ lq_karg$36$i$35$$35$$34$$47$Users$47$niki$47$liquidtypes$47$currentLH$47$liquidhaskell$47$tests$47$gradual$47$pos$47$GHCList$47$Round1$47$ScanrMono.hs$34$$32$$40$line$32$11$44$$32$column$32$83$41$)))))
(check-sat)
; SMT Says: Unsat
(pop 1)
(push 1)
(assert (not (exists ((lq_karg$36$o$35$$35$$34$$47$Users$47$niki$47$liquidtypes$47$currentLH$47$liquidhaskell$47$tests$47$gradual$47$pos$47$GHCList$47$Round1$47$ScanrMono.hs$34$$32$$40$line$32$11$44$$32$column$32$83$41$ Int)) (and (not (= lq_karg$36$o$35$$35$$34$$47$Users$47$niki$47$liquidtypes$47$currentLH$47$liquidhaskell$47$tests$47$gradual$47$pos$47$GHCList$47$Round1$47$ScanrMono.hs$34$$32$$40$line$32$11$44$$32$column$32$83$41$ lq_karg$36$i$35$$35$$34$$47$Users$47$niki$47$liquidtypes$47$currentLH$47$liquidhaskell$47$tests$47$gradual$47$pos$47$GHCList$47$Round1$47$ScanrMono.hs$34$$32$$40$line$32$11$44$$32$column$32$83$41$))))))
(check-sat)
; SMT Says: Unsat
(pop 1)
(push 1)
(assert (not (=> true true)))
(check-sat)
; SMT Says: Unsat
(pop 1)
(push 1)
(assert (not (=> (and (= lq_karg$36$o$35$$35$$34$$47$Users$47$niki$47$liquidtypes$47$currentLH$47$liquidhaskell$47$tests$47$gradual$47$pos$47$GHCList$47$Round1$47$ScanrMono.hs$34$$32$$40$line$32$11$44$$32$column$32$83$41$ lq_karg$36$i$35$$35$$34$$47$Users$47$niki$47$liquidtypes$47$currentLH$47$liquidhaskell$47$tests$47$gradual$47$pos$47$GHCList$47$Round1$47$ScanrMono.hs$34$$32$$40$line$32$11$44$$32$column$32$83$41$)) true)))
(check-sat)
; SMT Says: Error "line 1022 column 259: unknown constant len$32$o"
(pop 1)
(push 1)
(assert (not (=> (and (= (apply$35$$35$0 (as len Int) lq_karg$36$o$35$$35$$34$$47$Users$47$niki$47$liquidtypes$47$currentLH$47$liquidhaskell$47$tests$47$gradual$47$pos$47$GHCList$47$Round1$47$ScanrMono.hs$34$$32$$40$line$32$11$44$$32$column$32$83$41$) (+ 1 (apply$35$$35$0 (as len Int) lq_karg$36$i$35$$35$$34$$47$Users$47$niki$47$liquidtypes$47$currentLH$47$liquidhaskell$47$tests$47$gradual$47$pos$47$GHCList$47$Round1$47$ScanrMono.hs$34$$32$$40$line$32$11$44$$32$column$32$83$41$)))) true)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (=> (and (= (apply$35$$35$0 (as tail Int) lq_karg$36$o$35$$35$$34$$47$Users$47$niki$47$liquidtypes$47$currentLH$47$liquidhaskell$47$tests$47$gradual$47$pos$47$GHCList$47$Round1$47$ScanrMono.hs$34$$32$$40$line$32$11$44$$32$column$32$83$41$) lq_karg$36$i$35$$35$$34$$47$Users$47$niki$47$liquidtypes$47$currentLH$47$liquidhaskell$47$tests$47$gradual$47$pos$47$GHCList$47$Round1$47$ScanrMono.hs$34$$32$$40$line$32$11$44$$32$column$32$83$41$)) true)))
(check-sat)
; SMT Says: Error "line 1026 column 260: unknown constant len$32$o"
(pop 1)
(push 1)
(assert (not (=> (and (= (apply$35$$35$0 (as head Int) lq_karg$36$o$35$$35$$34$$47$Users$47$niki$47$liquidtypes$47$currentLH$47$liquidhaskell$47$tests$47$gradual$47$pos$47$GHCList$47$Round1$47$ScanrMono.hs$34$$32$$40$line$32$11$44$$32$column$32$83$41$) lq_karg$36$lq_tmp$36$db$35$$35$4$35$$35$$34$$47$Users$47$niki$47$liquidtypes$47$currentLH$47$liquidhaskell$47$tests$47$gradual$47$pos$47$GHCList$47$Round1$47$ScanrMono.hs$34$$32$$40$line$32$11$44$$32$column$32$83$41$)) true)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (=> (and (= (apply$35$$35$0 (as len Int) lq_karg$36$o$35$$35$$34$$47$Users$47$niki$47$liquidtypes$47$currentLH$47$liquidhaskell$47$tests$47$gradual$47$pos$47$GHCList$47$Round1$47$ScanrMono.hs$34$$32$$40$line$32$11$44$$32$column$32$83$41$) 0)) true)))
(check-sat)
; SMT Says: Error "line 1030 column 259: unknown constant len$32$o"
(pop 1)
(push 1)
(assert (not (=> (and (>= (apply$35$$35$0 (as len Int) lq_karg$36$o$35$$35$$34$$47$Users$47$niki$47$liquidtypes$47$currentLH$47$liquidhaskell$47$tests$47$gradual$47$pos$47$GHCList$47$Round1$47$ScanrMono.hs$34$$32$$40$line$32$11$44$$32$column$32$83$41$) 0)) true)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (=> (and (> (apply$35$$35$0 (as len Int) lq_karg$36$o$35$$35$$34$$47$Users$47$niki$47$liquidtypes$47$currentLH$47$liquidhaskell$47$tests$47$gradual$47$pos$47$GHCList$47$Round1$47$ScanrMono.hs$34$$32$$40$line$32$11$44$$32$column$32$83$41$) 0)) true)))
(check-sat)
; SMT Says: Error "line 1034 column 260: unknown constant len$32$o"
(pop 1)
(push 1)
(assert (not (=> (and (= (apply$35$$35$0 (as len Int) lq_karg$36$o$35$$35$$34$$47$Users$47$niki$47$liquidtypes$47$currentLH$47$liquidhaskell$47$tests$47$gradual$47$pos$47$GHCList$47$Round1$47$ScanrMono.hs$34$$32$$40$line$32$11$44$$32$column$32$83$41$) (apply$35$$35$0 (as len Int) lq_karg$36$i$35$$35$$34$$47$Users$47$niki$47$liquidtypes$47$currentLH$47$liquidhaskell$47$tests$47$gradual$47$pos$47$GHCList$47$Round1$47$ScanrMono.hs$34$$32$$40$line$32$11$44$$32$column$32$83$41$))) true)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (=> (and (>= (apply$35$$35$0 (as len Int) lq_karg$36$o$35$$35$$34$$47$Users$47$niki$47$liquidtypes$47$currentLH$47$liquidhaskell$47$tests$47$gradual$47$pos$47$GHCList$47$Round1$47$ScanrMono.hs$34$$32$$40$line$32$11$44$$32$column$32$83$41$) (apply$35$$35$0 (as len Int) lq_karg$36$i$35$$35$$34$$47$Users$47$niki$47$liquidtypes$47$currentLH$47$liquidhaskell$47$tests$47$gradual$47$pos$47$GHCList$47$Round1$47$ScanrMono.hs$34$$32$$40$line$32$11$44$$32$column$32$83$41$))) true)))
(check-sat)
; SMT Says: Error "line 1038 column 259: unknown constant len$32$o"
(pop 1)
(push 1)
(assert (not (=> (and (> (apply$35$$35$0 (as len Int) lq_karg$36$o$35$$35$$34$$47$Users$47$niki$47$liquidtypes$47$currentLH$47$liquidhaskell$47$tests$47$gradual$47$pos$47$GHCList$47$Round1$47$ScanrMono.hs$34$$32$$40$line$32$11$44$$32$column$32$83$41$) (apply$35$$35$0 (as len Int) lq_karg$36$i$35$$35$$34$$47$Users$47$niki$47$liquidtypes$47$currentLH$47$liquidhaskell$47$tests$47$gradual$47$pos$47$GHCList$47$Round1$47$ScanrMono.hs$34$$32$$40$line$32$11$44$$32$column$32$83$41$))) true)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (=> (and (<= (apply$35$$35$0 (as len Int) lq_karg$36$o$35$$35$$34$$47$Users$47$niki$47$liquidtypes$47$currentLH$47$liquidhaskell$47$tests$47$gradual$47$pos$47$GHCList$47$Round1$47$ScanrMono.hs$34$$32$$40$line$32$11$44$$32$column$32$83$41$) (apply$35$$35$0 (as len Int) lq_karg$36$i$35$$35$$34$$47$Users$47$niki$47$liquidtypes$47$currentLH$47$liquidhaskell$47$tests$47$gradual$47$pos$47$GHCList$47$Round1$47$ScanrMono.hs$34$$32$$40$line$32$11$44$$32$column$32$83$41$))) true)))
(check-sat)
; SMT Says: Unsat
(pop 1)
(push 1)
(assert (not (=> (and (< (apply$35$$35$0 (as len Int) lq_karg$36$o$35$$35$$34$$47$Users$47$niki$47$liquidtypes$47$currentLH$47$liquidhaskell$47$tests$47$gradual$47$pos$47$GHCList$47$Round1$47$ScanrMono.hs$34$$32$$40$line$32$11$44$$32$column$32$83$41$) (apply$35$$35$0 (as len Int) lq_karg$36$i$35$$35$$34$$47$Users$47$niki$47$liquidtypes$47$currentLH$47$liquidhaskell$47$tests$47$gradual$47$pos$47$GHCList$47$Round1$47$ScanrMono.hs$34$$32$$40$line$32$11$44$$32$column$32$83$41$))) true)))
(check-sat)
; SMT Says: Unsat
(pop 1)
(push 1)
(assert (not (=> (and (= lq_karg$36$lq_tmp$36$db$35$$35$4$35$$35$$34$$47$Users$47$niki$47$liquidtypes$47$currentLH$47$liquidhaskell$47$tests$47$gradual$47$pos$47$GHCList$47$Round1$47$ScanrMono.hs$34$$32$$40$line$32$11$44$$32$column$32$83$41$ (apply$35$$35$0 (as len Int) lq_karg$36$o$35$$35$$34$$47$Users$47$niki$47$liquidtypes$47$currentLH$47$liquidhaskell$47$tests$47$gradual$47$pos$47$GHCList$47$Round1$47$ScanrMono.hs$34$$32$$40$line$32$11$44$$32$column$32$83$41$))) true)))
(check-sat)
; SMT Says: Unsat
(pop 1)
(push 1)
(assert (not (=> (and (= (apply$35$$35$0 (as len Int) lq_karg$36$o$35$$35$$34$$47$Users$47$niki$47$liquidtypes$47$currentLH$47$liquidhaskell$47$tests$47$gradual$47$pos$47$GHCList$47$Round1$47$ScanrMono.hs$34$$32$$40$line$32$11$44$$32$column$32$83$41$) (+ lq_karg$36$lq_tmp$36$db$35$$35$4$35$$35$$34$$47$Users$47$niki$47$liquidtypes$47$currentLH$47$liquidhaskell$47$tests$47$gradual$47$pos$47$GHCList$47$Round1$47$ScanrMono.hs$34$$32$$40$line$32$11$44$$32$column$32$83$41$ 1))) true)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (=> (and (= (apply$35$$35$0 (as len Int) lq_karg$36$o$35$$35$$34$$47$Users$47$niki$47$liquidtypes$47$currentLH$47$liquidhaskell$47$tests$47$gradual$47$pos$47$GHCList$47$Round1$47$ScanrMono.hs$34$$32$$40$line$32$11$44$$32$column$32$83$41$) (- lq_karg$36$lq_tmp$36$db$35$$35$4$35$$35$$34$$47$Users$47$niki$47$liquidtypes$47$currentLH$47$liquidhaskell$47$tests$47$gradual$47$pos$47$GHCList$47$Round1$47$ScanrMono.hs$34$$32$$40$line$32$11$44$$32$column$32$83$41$ 1))) true)))
(check-sat)
; SMT Says: Unsat
(pop 1)
(push 1)
(assert (not (=> (and (= 0 1)) true)))
(check-sat)
; SMT Says: Unsat
(pop 1)
(push 1)
(assert (not (=> (and (< lq_karg$36$o$35$$35$$34$$47$Users$47$niki$47$liquidtypes$47$currentLH$47$liquidhaskell$47$tests$47$gradual$47$pos$47$GHCList$47$Round1$47$ScanrMono.hs$34$$32$$40$line$32$11$44$$32$column$32$83$41$ lq_karg$36$i$35$$35$$34$$47$Users$47$niki$47$liquidtypes$47$currentLH$47$liquidhaskell$47$tests$47$gradual$47$pos$47$GHCList$47$Round1$47$ScanrMono.hs$34$$32$$40$line$32$11$44$$32$column$32$83$41$)) true)))
(check-sat)
; SMT Says: Unsat
(pop 1)
(push 1)
(assert (not (=> (and (<= lq_karg$36$o$35$$35$$34$$47$Users$47$niki$47$liquidtypes$47$currentLH$47$liquidhaskell$47$tests$47$gradual$47$pos$47$GHCList$47$Round1$47$ScanrMono.hs$34$$32$$40$line$32$11$44$$32$column$32$83$41$ lq_karg$36$i$35$$35$$34$$47$Users$47$niki$47$liquidtypes$47$currentLH$47$liquidhaskell$47$tests$47$gradual$47$pos$47$GHCList$47$Round1$47$ScanrMono.hs$34$$32$$40$line$32$11$44$$32$column$32$83$41$)) true)))
(check-sat)
; SMT Says: Unsat
(pop 1)
(push 1)
(assert (not (=> (and (> lq_karg$36$o$35$$35$$34$$47$Users$47$niki$47$liquidtypes$47$currentLH$47$liquidhaskell$47$tests$47$gradual$47$pos$47$GHCList$47$Round1$47$ScanrMono.hs$34$$32$$40$line$32$11$44$$32$column$32$83$41$ lq_karg$36$i$35$$35$$34$$47$Users$47$niki$47$liquidtypes$47$currentLH$47$liquidhaskell$47$tests$47$gradual$47$pos$47$GHCList$47$Round1$47$ScanrMono.hs$34$$32$$40$line$32$11$44$$32$column$32$83$41$)) true)))
(check-sat)
; SMT Says: Unknown
(pop 1)
(push 1)
(assert (not (=> (and (>= lq_karg$36$o$35$$35$$34$$47$Users$47$niki$47$liquidtypes$47$currentLH$47$liquidhaskell$47$tests$47$gradual$47$pos$47$GHCList$47$Round1$47$ScanrMono.hs$34$$32$$40$line$32$11$44$$32$column$32$83$41$ lq_karg$36$i$35$$35$$34$$47$Users$47$niki$47$liquidtypes$47$currentLH$47$liquidhaskell$47$tests$47$gradual$47$pos$47$GHCList$47$Round1$47$ScanrMono.hs$34$$32$$40$line$32$11$44$$32$column$32$83$41$)) true)))
(check-sat)
; SMT Says: Unsat
(pop 1)
(push 1)
(assert (not (=> (and (not (= lq_karg$36$o$35$$35$$34$$47$Users$47$niki$47$liquidtypes$47$currentLH$47$liquidhaskell$47$tests$47$gradual$47$pos$47$GHCList$47$Round1$47$ScanrMono.hs$34$$32$$40$line$32$11$44$$32$column$32$83$41$ lq_karg$36$i$35$$35$$34$$47$Users$47$niki$47$liquidtypes$47$currentLH$47$liquidhaskell$47$tests$47$gradual$47$pos$47$GHCList$47$Round1$47$ScanrMono.hs$34$$32$$40$line$32$11$44$$32$column$32$83$41$))) true)))
(check-sat)
; SMT Says: Unsat
(pop 1)
(exit)
